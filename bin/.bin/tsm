#!/bin/bash

# Function to get unique session names
get_unique_sessions() {
    tmux list-sessions -F '#{session_name}' | sed 's/^floating_//; s/_[0-9]*$//' | sort -u
}

# Function to get all sessions for a given base name
get_sessions_for_base() {
    base_name="$1"
    tmux list-sessions -F '#{session_name}' | grep -E "^(floating_${base_name}_[0-9]*)|(${base_name})$"
}

# Function to list sessions
list_sessions() {
    get_unique_sessions
}

# Function to kill sessions
kill_session() {
    base_name="$1"
    sessions_to_remove=$(get_sessions_for_base "${base_name}")
    echo $sessions_to_remove
    printf "%s\n" "${sessions_to_remove}" | while IFS= read -r session; do
      tmux kill-session -t "${session}" && printf "Removed session: %s\n" "${session}" >&2
    done
}

# Function to create or attach to a floating popup session
popup() {
    window_id=$(tmux display-message -p '#I')
    current_session_name=$(tmux display-message -p '#S')
    parent_session_dir=$(tmux display-message -p -F "#{pane_current_path}" -t0)
    session_name="floating_${current_session_name}_${window_id}"
    startup_command="$1"

    if tmux has-session -t "$session_name" 2>/dev/null; then
        if [ -n "$startup_command" ]; then
            target_pane=$(tmux list-panes -a -F "#{session_name} #{pane_id} #{window_name}" | grep -i "^$session_name" | grep -i "$(echo $startup_command | cut -d' ' -f1)" | awk '{print $2}')
            switch_command=""
            if [ -z "$target_pane" ]; then
                window_name=$(echo $startup_command | cut -d' ' -f1)
                tmux new-window -t "$session_name" -n "$window_name" -c "$parent_session_dir" "$startup_command"
            else
                switch_command="tmux select-window -t $(tmux display-message -p -F "#{window_index}" -t"$target_pane") ;"
            fi
        fi
        tmux popup -w 90% -h 80% -E "bash -c \"tmux attach -t $session_name; $switch_command\""
    else
        if [ -z "$startup_command" ]; then
            tmux new-session -d -s "$session_name" -c "$parent_session_dir"
        else
            window_name=$(echo $startup_command | cut -d' ' -f1)
            tmux new-session -d -s "$session_name" -c "$parent_session_dir" "$startup_command"
            tmux rename-window -t "$session_name":1 "$window_name"
        fi
        tmux popup -w 90% -h 80% -E "bash -c \"tmux attach -t $session_name\""
    fi
}

# Function to display help
display_help() {
    echo "Usage: tsm <command> [arguments]"
    echo
    echo "Commands:"
    echo "  list                  List all unique session names"
    echo "  kill <session_name>   Kill all sessions with the given base name"
    echo "  popup [command]       Create or attach to a floating popup session"
    echo "  help                  Display this help message"
    echo
    echo "For the 'popup' command:"
    echo "  If a command is provided, it will be executed in the new session."
    echo "  If no command is provided, a new shell will be opened in the floating session."
    echo "  If the floating session already exists, the script will attach to it."
    echo "  If a command is provided and the process is already running in the session,"
    echo "  the script will switch to the corresponding window."
}

# Main script
main() {
    case "$1" in
        list)
            list_sessions
            ;;
        kill)
            if [ -z "$2" ]; then
                echo "Error: No session name provided for kill command" >&2
                exit 1
            fi
            kill_session "$2"
            ;;
        popup)
            shift
            popup "$@"
            ;;
        help)
            display_help
            ;;
        *)
            echo "Error: Unknown command. Use 'tsm help' for usage information." >&2
            exit 1
            ;;
    esac
}

# Run the main function with all arguments
main "$@"

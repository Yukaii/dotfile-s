#!/usr/bin/env bun
// @bun
var _0=Object.defineProperty;var $0=(P,R)=>{for(var _ in R)_0(P,_,{get:R[_],enumerable:!0,configurable:!0,set:($)=>R[_]=()=>$})};import F0 from"events";import{parseArgs as z0} from"util";var y={openai:"Continue the input code from the language <languageId>. Only respond with code.",copilot:"<languageId> completions. Only respond with code."};var C=[{key:"resolveDiagnostics",label:"Resolve diagnostics",query:"Resolve the diagnostics for this code."},{key:"generateDocs",label:"Generate documentation",query:"Add documentation to this code."},{key:"improveCode",label:"Improve code",query:"Improve this code."},{key:"refactorFromComment",label:"Refactor code from a comment",query:"Refactor this code based on the comment."},{key:"writeTest",label:"Write a unit test",query:"Write a unit test for this code. Do not include any imports."}];var{values:V}=z0({args:Bun.argv,options:{logFile:{type:"string",default:Bun.env.LOG_FILE??""},handler:{type:"string",default:Bun.env.HANDLER??"openai"},debounce:{type:"string",default:Bun.env.DEBOUNCE??"400"},triggerCharacters:{type:"string",default:Bun.env.TRIGGER_CHARACTERS??"{||(|| "},openaiKey:{type:"string",default:Bun.env.OPENAI_API_KEY},openaiContext:{type:"string",default:Bun.env.OPENAI_CONTEXT?.length?Bun.env.OPENAI_CONTEXT:y.openai},openaiModel:{type:"string",default:Bun.env.OPENAI_MODEL??"gpt-3.5-turbo-16k"},openaiMaxTokens:{type:"string",default:Bun.env.OPENAI_MAX_TOKENS??"7000"},openaiEndpoint:{type:"string",default:Bun.env.OPENAI_ENDPOINT??"https://api.openai.com/v1"},copilotEndpoint:{type:"string",default:Bun.env.GITHUB_ENDPOINT??"https://api.githubcopilot.com"},copilotContext:{type:"string",default:Bun.env.COPILOT_CONTEXT?.length?Bun.env.COPILOT_CONTEXT:y.copilot},copilotModel:{type:"string",default:Bun.env.COPILOT_MODEL??"gpt-3.5-turbo"},copilotApiKey:{type:"string",default:Bun.env.COPILOT_API_KEY},authCopilot:{type:"boolean",default:!1},authCodeium:{type:"boolean",default:!1},codeiumApiKey:{type:"string",default:Bun.env.CODEIUM_API_KEY??"d49954eb-cfba-4992-980f-d8fb37f0e942"}},strict:!0,allowPositionals:!0});if(!Bun.env.TEST_RUNNER?.length&&!V.openaiKey?.length&&!V.copilotApiKey?.length&&V.handler!=="codeium")throw new Error("no handler key provided");V.triggerCharacters=V.triggerCharacters.split("||");var N=V;import O0 from"crypto";import Y0 from"fs";var x={},u=(P,R,_)=>{if(x[P])clearTimeout(x[P]);x[P]=setTimeout(R,_)},q=(P)=>{const R=new URLSearchParams(P);return Object.fromEntries(R.entries())},W=(P)=>{return O0.randomBytes(P/2).toString("hex")},a=()=>{return W(8)+"-"+W(4)+"-"+W(4)+"-"+W(4)+"-"+W(12)},d=async(P,R,_)=>{const $=P?.split("\n").slice(0,R+1);$[$.length-1]=$[$.length-1].split("").slice(0,_).join("");const z=$[$.length-1],O=$.join("\n"),J=P?.split("\n").slice(R+1).join("\n"),X=O.slice(-1);return{contentBefore:O,contentAfter:J,lastCharacter:X,lastLine:z}},p,F=(...P)=>{if(!N.logFile)return;if(Bun.env.TEST_RUNNER)console.log(o(...P));else if(N.logFile?.length){if(!p)p=Y0.createWriteStream(N.logFile);try{p.write(o(...P)+"\n\n")}catch(R){}}},o=(...P)=>{let R=[];return P.forEach((_)=>{R.push(_),R.push("|")}),R=R.slice(0,R.length-1),["APP",(new Date()).toISOString(),"-->",...R].join(" ")},L=(P)=>{return Array.from(new Set(P))},i=(P)=>{if(!P?.length)return{};const R={},_=P.split(";");for(let $ of _){const[z,O]=$.split("=");R[z]=O}return R},r=()=>{return Math.floor(Date.now()/1000)},H=(P,R,_)=>{const $=new RegExp(`\`\`\`${_}([\\s\\S]*?)\`\`\``,"g");let z;const O=[];while((z=$.exec(R))!==null)O.push(z[0]);const J=O[0];if(!J?.length)return;const X=J?.replace(`// FILEPATH: ${P.replace("file://","")}\n`,"")?.split("\n");return X?.slice(1,X.length-1)?.join("\n")+"\n"};var Z;(function(Y){Y["DidOpen"]="textDocument/didOpen";Y["DidChange"]="textDocument/didChange";Y["Completion"]="textDocument/completion";Y["CodeAction"]="textDocument/codeAction";Y["ApplyEdit"]="workspace/applyEdit";Y["ExecuteCommand"]="workspace/executeCommand";Y["Initialize"]="initialize";Y["Shutdown"]="shutdown";Y["Exit"]="exit";Y["PublishDiagnostics"]="textDocument/publishDiagnostics"})(Z||(Z={}));var K;(function(z){z[z["Error"]=1]="Error";z[z["Warning"]=2]="Warning";z[z["Information"]=3]="Information";z[z["Hint"]=4]="Hint"})(K||(K={}));class s{emitter;capabilities;currentUri;buffers;constructor({capabilities:P}){this.emitter=new F0({captureRejections:!0}),this.capabilities=P,this.buffers={},F("triggerCharacters:",JSON.stringify(P?.completionProvider?.triggerCharacters)),this.registerDefault()}registerDefault(){this.emitter.on("error",(P)=>{F("lsp-event-emitter error",P.message)}),this.on(Z.Initialize,async({ctx:P})=>{P.send({method:Z.Initialize,id:0,result:{capabilities:this.capabilities}})}),this.on(Z.DidOpen,({ctx:P,request:R})=>{const{uri:_,text:$,languageId:z}=R.params.textDocument;this.buffers[_]={uri:_,text:$,languageId:z,version:0},this.currentUri=_,F("received didOpen",`language: ${z}`)}),this.on(Z.Shutdown,()=>{F("received shutdown request"),process.exit(0)}),this.on(Z.DidChange,async({ctx:P,request:R})=>{const{uri:_,version:$}=R.params.textDocument;this.buffers[_]={...this.buffers[_],version:$,text:R.params.contentChanges[0].text},this.currentUri=_,F("received didChange",`language: ${this.buffers[_].languageId}`,`contentVersion: ${$}`,`uri: ${_}`)})}getContentPadding(P){return P.split("\n").reduce(($,z)=>{if(z.trim().length===0)return $;const J=z.match(/^\s+/)?.[0].length||0;return Math.min(J,$)},99999)}padContent(P,R){return P.split("\n").map((_)=>{if(_.trim().length===0)return _;return" ".repeat(R)+_}).join("\n")}registerEventHandlers(P){Object.values(P).forEach((R)=>{R(this)})}getContentFromRange(P){F("getting content from range",JSON.stringify(P),`uri: ${this.currentUri}`,`current buffers: ${JSON.stringify(Object.keys(this.buffers))}`);const{start:R,end:_}=P;return this.buffers[this.currentUri]?.text?.split("\n")?.slice(R.line,_.line).join("\n")}positionalUpdate(P,R,_){const z=this.buffers[P]?.text?.split("\n"),O=_.start.line,J=_.end.line,X=z[O],M=z[J],T=X?.substring(0,_.start.character),Y=M?.substring(_.end.character),G=[T+R+Y],j=z.reduce((Q,I,U)=>{if(U<O||U>J)Q.push(I);else if(U===O)Q.push(G[0]);return Q},[]);this.buffers[P].text=j.join("\n")}on(P,R){this.emitter.on(P,async(_)=>{try{await R({ctx:this,request:_})}catch($){F("error in event",JSON.stringify(_),$.message)}})}send({method:P,id:R,result:_,params:$}){const z=JSON.stringify({jsonrpc:"2.0",method:P,id:R,result:_,params:$});console.log(`Content-Length: ${z.length}\r\n\r\n${z}`),F("sent request",z)}sendDiagnostics(P,R=0){F("sending diagnostics",JSON.stringify(P));const _={uri:this.currentUri,diagnostics:P.map(($)=>{return $.source="helix-gpt",$})};if(this.send({method:Z.PublishDiagnostics,params:_}),R>0)setTimeout(()=>{this.send({method:Z.PublishDiagnostics,params:{uri:this.currentUri,diagnostics:[]}})},R)}resetDiagnostics(){this.send({method:Z.PublishDiagnostics,params:{uri:this.currentUri,diagnostics:[]}})}parseLine(P){const R=P.split("\r\n");for(let _ of R)try{return JSON.parse(_)}catch($){}throw new Error("failed to parse")}async receiveLine(P){try{const R=this.parseLine(P);if(![Z.DidChange,Z.DidOpen].includes(R.method))F("received request:",JSON.stringify(R));this.emitter.emit(R.method,R)}catch(R){F("failed to parse line:",R.message,P)}}async start(){for await(let P of Bun.stdin.stream()){const R=Buffer.from(P).toString();this.receiveLine(R)}}}var n={Service:s,Event:Z,DiagnosticSeverity:K};var l={};$0(l,{completions:()=>{{return Z0}},actions:()=>{{return X0}}});var c={},J0=(P,R)=>{c[P]=R},t=(P)=>{if(!c[N.handler]){const R=`no provider: ${N.handler}`;throw F(R),new Error(R)}return c[N.handler]},N0=async(...P)=>{F(N.handler,"chat request",JSON.stringify(P));const R=t(N.handler);if(!R.chat){const _=`No chat provider for: ${N.handler}`;throw F(_),new Error(_)}return R.chat(...P)},W0=async(...P)=>{F(N.handler,"completion request");const R=t(N.handler);if(!R.completion){const _=`No completion provider for: ${N.handler}`;throw F(_),new Error(_)}return R.completion(...P)},w={chat:N0,completion:W0,registerProvider:J0};var X0=(P)=>{P.on(Z.ExecuteCommand,async({ctx:R,request:_})=>{const{command:$}=_.params,{diagnostics:z,range:O}=_.params.arguments[0];let{query:J}=_.params.arguments[0];R.sendDiagnostics([{message:`Executing ${$}...`,range:O,severity:K.Information}],1e4);const X=R.getContentFromRange(O),M=R.getContentPadding(X),T=R.buffers[R.currentUri];if(F("chat request content:",X),z?.length)J+="\n\nDiagnostics: "+z.join("\n- ");try{var{result:Y}=await w.chat(J,X,R.currentUri,T?.languageId);if(!Y?.length)throw new Error("No completion found")}catch(G){return F("chat failed",G.message),R.sendDiagnostics([{message:G.message,severity:K.Error,range:O}],1e4)}Y=R.padContent(Y.trim(),M)+"\n",F("received chat result:",Y),R.send({method:Z.ApplyEdit,id:_.id,params:{label:$,edit:{changes:{[R.currentUri]:[{range:O,newText:Y}]}}}}),R.resetDiagnostics()}),P.on(Z.CodeAction,({ctx:R,request:_})=>{R.currentUri=_.params.textDocument.uri,R.send({id:_.id,result:C.map(($)=>({title:$.label,kind:"quickfix",diagnostics:[],command:{title:$.label,command:$.key,arguments:[{range:_.params.range,query:$.query,diagnostics:_.params.context?.diagnostics?.map((z)=>z.message)}]}}))})})};var Z0=(P)=>{P.on(Z.Completion,async({ctx:_,request:$})=>{const z=_.buffers[$.params.textDocument.uri],O=z.version,{lastCharacter:J}=await d(z.text,$.params.position.line,$.params.position.character);if(J==".")return _.send({id:$.id,result:{isIncomplete:!1,items:[]}});u("completion",async()=>{try{await R({ctx:_,request:$,lastContentVersion:O})}catch(X){F("error in completion event",X.message),_.sendDiagnostics([{message:X.message,severity:K.Error,range:{start:{line:$.params.position.line,character:0},end:{line:$.params.position.line+1,character:0}}}],1e4)}},parseInt(N.debounce))});const R=async({ctx:_,request:$,lastContentVersion:z})=>{const O=()=>{_.resetDiagnostics(),_.send({id:$.id,result:{isIncomplete:!1,items:[]}})},J=_.buffers[$.params.textDocument.uri];if(F("running completion on buffer",JSON.stringify(J)),J.version>z)return F("skipping because content is stale"),O();const{lastLine:X,contentBefore:M,contentAfter:T}=await d(J.text,$.params.position.line,$.params.position.character);F("calling completion event"),_.sendDiagnostics([{message:"Fetching completion...",severity:K.Information,range:{start:{line:$.params.position.line,character:0},end:{line:$.params.position.line+1,character:0}}}],1e4);try{var Y=await w.completion({contentBefore:M,contentAfter:T},_.currentUri,J?.languageId)}catch(j){return _.sendDiagnostics([{message:j.message,severity:K.Error,range:{start:{line:$.params.position.line,character:0},end:{line:$.params.position.line+1,character:0}}}],1e4)}F("completion hints:",Y);const G=Y?.map((j)=>{if(j.startsWith(X.trim()))j=j.slice(X.trim().length);const Q=j.split("\n"),I=$.params.position.line+Q.length-1;let U=Q.slice(-1)[0].length;if(I==$.params.position.line)U+=$.params.position.character;return{label:j.split("\n")[0],kind:1,preselect:!0,detail:j,insertText:j,insertTextFormat:1,additionalTextEdits:[{newText:"",range:{start:{line:I,character:U},end:{line:I,character:200}}}]}});_.send({id:$.id,result:{isIncomplete:!1,items:G}}),_.resetDiagnostics()}};class B{url;headers;params;constructor({url:P,headers:R,params:_}){this.url=P,this.headers=R||{},this.params=_||{}}async fetch(P,R,_=1e4){return new Promise(async($,z)=>{setTimeout(()=>z(new Error("timeout")),_);try{const O=await fetch(P,R);$(O)}catch(O){z(O)}})}async request(P){const{endpoint:R,method:_,body:$,headers:z,params:O,url:J,timeout:X}=P;let M=new URL(R,J||this.url);if(F("fetch",R),O)Object.keys(O).forEach((G)=>M.searchParams.append(G,O[G]));Object.keys(this.params).forEach((G)=>{M.searchParams.append(G,this.params[G])});let T={headers:{...this.headers,...z},method:_,body:null};if($)T.body=JSON.stringify($);const Y=await this.fetch(M.toString(),T,X);if(!Y.ok){let G=await Y.text();throw new Error(`Fetch failed with status ${Y.status} body ${G} url: ${P.endpoint}`)}if(F("response",M,Y.status),P.text)return await Y.text();return await Y.json()}}class k{deviceCode;userCode;verificationUri;expiresIn;interval;message;constructor(P){this.deviceCode=P.device_code,this.userCode=P.user_code,this.verificationUri=P.verification_uri,this.expiresIn=P.expires_in,this.interval=P.interval,this.message=P.message}static fromResponse(P){const R=q(P);return new k(R)}}class E{accessToken;tokenType;scope;constructor(P){this.accessToken=P.access_token,this.tokenType=P.token_type,this.scope=P.scope}static fromResponse(P){const R=q(P);return new E(R)}}class b{exp;raw;constructor(P){this.exp=P.exp,this.raw=P.raw}static fromResponse(P){const R=i(P?.token);return new b({exp:parseInt(R.exp),raw:P?.token})}}class h extends Array{constructor(...P){super();this.push(...L(P))}static fromResponse(P){const R=P.split("\n").map(($)=>$.slice(5)).map(($)=>{try{return JSON.parse($).choices[0]}catch(z){return null}}).filter(($)=>$).reduce(function($,z){return $[z.index]=$[z.index]||[],$[z.index].push(z),$},Object.create(null)),_=Object.values(R).map(($)=>$.map((z)=>z.text).join(""));return new h(..._)}}class S{result;constructor(P){this.result=P}static fromResponse(P,R,_){const $=P?.choices?.map((O)=>O.message?.content),z=H(R,$[0],_);return new S(z)}}class A extends B{copilotSession;constructor(){super({url:"https://github.com",headers:{"Content-Type":"application/json"}})}async deviceCode(){const P=await this.request({method:"POST",endpoint:"/login/device/code",text:!0,params:{scope:"read:user",client_id:"Iv1.b507a08c87ecfe98"}});return k.fromResponse(P)}async accessToken(P){const R=await this.request({method:"POST",endpoint:"/login/oauth/access_token",text:!0,params:{client_id:"Iv1.b507a08c87ecfe98",device_code:P,grant_type:"urn:ietf:params:oauth:grant-type:device_code"}});return E.fromResponse(R)}async refreshCopilotSession(){if(this.copilotSession?.exp&&this.copilotSession?.exp>=r())return;const P=await this.request({method:"GET",url:"https://api.github.com",endpoint:"/copilot_internal/v2/token",headers:{Authorization:`Bearer ${N.copilotApiKey}`}});this.copilotSession=b.fromResponse(P)}async chat(P,R,_,$){await this.refreshCopilotSession();const O={intent:!0,max_tokens:7909,model:"gpt-4",n:1,stream:!1,temperature:0.1,top_p:1,messages:[{content:`You are an AI programming assistant.\nWhen asked for your name, you must respond with \"GitHub Copilot\".\nFollow the user's requirements carefully & to the letter.\n- Each code block starts with \`\`\` and // FILEPATH.\n- You always answer with ${$} code.\n- When the user asks you to document something, you must answer in the form of a ${$} code block.\nYour expertise is strictly limited to software development topics.\nFor questions not related to software development, simply give a reminder that you are an AI programming assistant.\nKeep your answers short and impersonal.`,role:"system"},{content:`I have the following code in the selection:\n\`\`\`${$}\n// FILEPATH: ${_.replace("file://","")}\n${R}`,role:"user"},{content:P,role:"user"}]},J={"Content-Type":"application/json; charset=utf-8","User-Agent":"GitHubCopilotChat/0.8.0",Authorization:`Bearer ${this.copilotSession?.raw}`,"Editor-Plugin-Version":"copilot-chat/0.8.0","Editor-Version":"vscode/1.83.1","Openai-Intent":"conversation-panel","Openai-Organization":"github-copilot","VScode-MachineId":W(64),"VScode-SessionId":W(8)+"-"+W(4)+"-"+W(4)+"-"+W(4)+"-"+W(25),"X-Request-Id":W(8)+"-"+W(4)+"-"+W(4)+"-"+W(4)+"-"+W(12),"Accept-Encoding":"gzip,deflate,br",Accept:"*/*",Connection:"close"},X=await this.request({method:"POST",body:O,headers:J,url:"https://api.githubcopilot.com",endpoint:"/chat/completions"});return S.fromResponse(X,_,$)}async completion(P,R,_,$=3){await this.refreshCopilotSession();const z={"Content-Type":"application/json; charset=utf-8","User-Agent":"GithubCopilot/1.155.0",Authorization:`Bearer ${this.copilotSession?.raw}`,"Editor-Plugin-Version":"copilot/1.155.0","Editor-Version":"vscode/1.85.1","Openai-Intent":"copilot-ghost","Openai-Organization":"github-copilot","VScode-MachineId":W(64),"VScode-SessionId":W(8)+"-"+W(4)+"-"+W(4)+"-"+W(4)+"-"+W(25),"X-Request-Id":W(8)+"-"+W(4)+"-"+W(4)+"-"+W(4)+"-"+W(12),"Accept-Encoding":"gzip,deflate,br",Accept:"*/*"},O={extra:{language:_,next_indent:0,prompt_tokens:500,suffix_tokens:400,trim_by_indentation:!0},max_tokens:500,n:$,nwo:"app",prompt:`// Path: ${R.replace("file://","")}\n${P.contentBefore}`,stop:["\n\n"],stream:!0,suffix:P.contentAfter,temperature:$>1?0.4:0,top_p:1},J=await this.request({method:"POST",body:O,headers:z,text:!0,url:"https://copilot-proxy.githubusercontent.com",endpoint:"/v1/engines/copilot-codex/completions"});return h.fromResponse(J)}}var e=async()=>{const P=new A,R=await P.deviceCode();console.log(`Visit: ${R.verificationUri} in your browser and enter: ${R.userCode}`);while(!0){await new Promise(($)=>setTimeout($,5000));const _=await P.accessToken(R.deviceCode);if(_?.accessToken?.length){console.log("\n\nGot token:",_.accessToken,"\n\n","Store this in the COPILOT_API_KEY environment variable");break}console.log("Waiting for user authorization...")}};class g extends Array{constructor(...P){super();this.push(...L(P))}static fromResponse(P){return console.log(123,P),P.completionItems.map((R)=>R.completion.text)}}var K0={unspecified:0,c:1,clojure:2,coffeescript:3,cpp:4,csharp:5,css:6,cudacpp:7,dockerfile:8,go:9,groovy:10,handlebars:11,haskell:12,hcl:13,html:14,ini:15,java:16,javascript:17,json:18,julia:19,kotlin:20,latex:21,less:22,lua:23,makefile:24,markdown:25,objectivec:26,objectivecpp:27,perl:28,php:29,plaintext:30,protobuf:31,pbtxt:32,python:33,r:34,ruby:35,rust:36,sass:37,scala:38,scss:39,shell:40,sql:41,starlark:42,swift:43,tsx:44,typescript:45,visualbasic:46,vue:47,xml:48,xsl:49,yaml:50,svelte:51,toml:52,dart:53,rst:54,ocaml:55,cmake:56,pascal:57,elixir:58,fsharp:59,lisp:60,matlab:61,powershell:62,solidity:63,ada:64,ocaml_interface:65};class D extends B{sessionId;apiKey;constructor(P=N.codeiumApiKey){super({url:"https://web-backend.codeium.com",headers:{"Content-Type":"application/json"}});this.sessionId=a(),this.apiKey=P}authUrl(){return`https://codeium.com/profile?response_type=token&redirect_uri=vim-show-auth-token&state=${this.sessionId}&scope=openid%20profile%20email&redirect_parameters_type=query`}async register(P){const R={"Content-Type":"application/json"},_={firebase_id_token:P};return(await this.request({method:"POST",headers:R,url:"https://api.codeium.com",endpoint:"/register_user/",body:_}))?.api_key}async completion(P,R,_,$=3){const z={"Content-Type":"application/json",Authorization:`Basic ${this.apiKey}-${this.sessionId}`};R=R.replace("file://","");const O={metadata:{ideName:"Helix",ideVersion:"unknown",extensionVersion:"unknown",extensionName:"helix-gpt",apiKey:this.apiKey,sessionId:this.sessionId},document:{editor_language:_,language:K0[_],cursor_offset:P.contentBefore.length,line_ending:"\n",absolute_path:R,relative_path:R,text:P.contentBefore+"\n"+ +P.contentAfter},editor_options:{tab_size:2,insert_spaces:!0},other_documents:[]},J=await this.request({method:"POST",body:O,headers:z,endpoint:"/exa.language_server_pb.LanguageServerService/GetCompletions"});return g.fromResponse(J).slice(0,$)}}var P0=async()=>{const P=new D,R=P.authUrl();console.log(`Visit the following URL and enter the token below: ${R}`);const _=prompt("Token: "),$=await P.register(_?.trim());console.log(`\nCodeium API key: ${$}`)};class m extends Array{constructor(...P){super();this.push(...L(P))}static fromResponse(P){const R=P?.choices?.map((_)=>_.message.content);return new m(...R)}}class f{result;constructor(P){this.result=P}static fromResponse(P,R,_){const $=P?.choices?.map((O)=>O.message?.content),z=H(R,$[0],_);return new f(z)}}class v extends B{constructor(){super({url:N.openaiEndpoint,headers:{"Content-Type":"application/json",Authorization:`Bearer ${N.openaiKey}`}})}async chat(P,R,_,$){const O={max_tokens:7909,model:"gpt-4",n:1,stream:!1,temperature:0.1,top_p:1,messages:[{content:`You are an AI programming assistant.\nWhen asked for your name, you must respond with \"GitHub Copilot\".\nFollow the user's requirements carefully & to the letter.\n- Each code block starts with \`\`\` and // FILEPATH.\n- You always answer with ${$} code.\n- When the user asks you to document something, you must answer in the form of a ${$} code block.\nYour expertise is strictly limited to software development topics.\nFor questions not related to software development, simply give a reminder that you are an AI programming assistant.\nKeep your answers short and impersonal.`,role:"system"},{content:`I have the following code in the selection:\n\`\`\`${$}\n// FILEPATH: ${_.replace("file://","")}\n${R}`,role:"user"},{content:P,role:"user"}]},J=await this.request({method:"POST",body:O,endpoint:"/v1/chat/completions",timeout:1e4});return f.fromResponse(J,_,$)}async completion(P,R,_,$=3){const z=[{role:"system",content:N.openaiContext?.replace("<languageId>",_)+"\n\n"+`End of file context:\n\n${P.contentAfter}`},{role:"user",content:`Start of file context:\n\n${P.contentBefore}`}],O={model:N.openaiModel,max_tokens:parseInt(N.openaiMaxTokens),n:$,temperature:$>1?0.4:0,top_p:1,frequency_penalty:1,presence_penalty:2,messages:z},J=await this.request({method:"POST",body:O,endpoint:"/v1/chat/completions"});return m.fromResponse(J)}}if(N.authCopilot)await e(),process.exit(0);if(N.authCodeium)await P0(),process.exit(0);w.registerProvider("copilot",new A);w.registerProvider("openai",new v);w.registerProvider("codeium",new D);var R0=new n.Service({capabilities:{codeActionProvider:!0,executeCommandProvider:{commands:C.map((P)=>P.key)},completionProvider:{resolveProvider:!1,triggerCharacters:N.triggerCharacters},textDocumentSync:{change:1,openClose:!0}}});R0.registerEventHandlers(l);try{await R0.start()}catch(P){F("lsp-service error",P.message)}

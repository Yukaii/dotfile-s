#!/bin/sh
#
# pick files with folder navigation support
#
# requires:
# - rg (https://github.com/BurntSushi/ripgrep)
# - fzf (https://github.com/junegunn/fzf)
# - bat (https://github.com/sharkdp/bat)
# - fd (https://github.com/sharkdp/fd)
# - eza (https://github.com/eza-community/eza)

preview_cmd="bat --color=always --line-range=:500"
folder_preview_cmd="eza --icons --oneline --group-directories-first --all"
history_file="$HOME/.cache/kks-files-navigation-history"
start_dir="$(pwd)"  # Remember the starting directory
current_dir="${1:-.}"  # Use first argument as starting directory, or current directory if not provided

# Convert current_dir to absolute path
current_dir="$(realpath "$current_dir")"

[ -f "$history_file" ] || touch "$history_file"

# Function to get relative path from base to target
get_relative_path() {
  local target="$1"
  local base="$2"

  # If target is the same as base, return "."
  if [ "$target" = "$base" ]; then
    echo "."
    return
  fi

  # If target is not under base, return target
  if ! echo "$target" | grep -q "^$base/"; then
    echo "$target"
    return
  fi

  # Remove base path and leading slash
  echo "${target#$base/}"
}

# Function to get display path
get_display_path() {
  local abs_path="$1"
  # If the path is under start_dir, show relative path
  if echo "$abs_path" | grep -q "^$start_dir"; then
    get_relative_path "$abs_path" "$start_dir"
  else
    # If we've gone above start_dir, show absolute path
    echo "$abs_path"
  fi
}

while true; do
  display_path="$(get_display_path "$current_dir")"

  # Change to current directory for relative operations
  cd "$current_dir" || exit 1

  # Generate the file/folder list
  file_list=$(printf "..\n"; (fd --hidden --no-ignore --type d --max-depth 1 . | sed 's|^\./||'; rg --hidden --no-ignore -l '' . --max-depth 1 | sed 's|^\./||') | sort)

  selected=$(echo "$file_list" | \
    fzf --height 100% --highlight-line --prompt "files ($display_path)> " \
      --preview "if [ -d {} ]; then $folder_preview_cmd {}; else $preview_cmd {}; fi" \
      --history="$history_file" \
      --header="[ctrl-l] send files to grep buffer | [enter] open file/enter directory" \
      --bind "ctrl-l:execute(rg --hidden --no-ignore -l '' . --max-depth 1 | sed 's|^\./||' | fzf --filter={q} | sed 's|$|:1:1:|' | kks-pipe-to-grep-buffer)+abort")

  # Store the current absolute path before changing directory back
  current_abs_dir="$current_dir"

  # Change back to the start directory
  cd "$start_dir" || exit 1

  # Exit if no selection made
  [ -z "$selected" ] && exit 0

  # Handle selection
  if [ "$selected" = ".." ]; then
    # Navigate to parent directory
    current_dir="$(realpath "$current_abs_dir"/..)"
  elif [ -d "$current_abs_dir/$selected" ]; then
    # Navigate into selected directory (relative path)
    current_dir="$(realpath "$current_abs_dir/$selected")"
  elif [ -d "$selected" ]; then
    # Navigate into selected directory (absolute path)
    current_dir="$(realpath "$selected")"
  elif [ -f "$current_abs_dir/$selected" ]; then
    # Open selected file (relative path)
    kks edit "$current_abs_dir/$selected"
    exit 0
  else
    # Open selected file (absolute path)
    kks edit "$selected"
    exit 0
  fi
done

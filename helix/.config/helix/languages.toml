[language-server.eslint]
command = "vscode-eslint-language-server"
args = ["--stdio"]

[language-server.eslint.config]
codeActionsOnSave = { mode = "all", "source.fixAll.eslint" = true }
format = { enable = true }
nodePath = ""
quiet = false
rulesCustomizations = []
run = "onType"
validate = "on"
experimental = {}
problems = { shortenToSingleLine = false }

[language-server.eslint.config.codeAction]
disableRuleComment = { enable = true, location = "separateLine" }
showDocumentation = { enable = false }

[language-server.vscode-json-language-server.config]
json = { validate = { enable = true }, format = { enable = true } }
provideFormatter = true

[language-server.vscode-css-language-server.config]
css = { validate = { enable = true } }
scss = { validate = { enable = true } }
less = { validate = { enable = true } }
provideFormatter = true

[language-server.gpt]
command = "helix-gpt"
args = ["--logFile", "/tmp/helix-gpt.log"]

[language-server.scls]
command = "simple-completion-language-server"

[language-server.scls.config]
max_completion_items = 20            # set max completion results len for each group: words, snippets, unicode-input
snippets_first = true                # completions will return before snippets by default
snippets_inline_by_word_tail = false # suggest snippets by WORD tail, for example text `xsq|` become `x^2|` when snippet `sq` has body `^2`
feature_words = true                 # enable completion by word
feature_snippets = true              # enable snippets
feature_unicode_input = true         # enable "unicode input"
feature_paths = true                 # enable path completion
feature_citations = false            # enable citation completion (only on `citation` feature enabled)

[language-server.scls.environment]
RUST_LOG = "info,simple-completion-language-server=info"
LOG_FILE = "/tmp/completion.log"

[language-server.crystal]
filetypes = ["crystal"]
command = "crystalline"
args = ["--stdio"]


[[language]]
name = "git-commit"
language-servers = ["scls"]

[[language]]
name = "typescript"
language-servers = ["typescript-language-server", "eslint", "scls"]
# formatter = { command = "prettier", args = [ "--parser", "typescript" ] }
# formatter = { command = "dprint", args = [ "fmt", "--stdin", "typescript" ] }
# auto-format = true

[[language]]
name = "markdown"
language-servers = ["marksman", "scls"]

[[language]]
name = "tsx"
language-servers = ["typescript-language-server", "eslint", "scls"]
# formatter = { command = "prettier", args = [ "--parser", "typescript" ] }
# formatter = { command = "dprint", args = [ "fmt", "--stdin", "tsx" ] }
# auto-format = true

[[language]]
name = "javascript"
language-servers = ["typescript-language-server", "eslint", "scls"]
# formatter = { command = "prettier", args = [ "--parser", "typescript" ] }
# formatter = { command = "dprint", args = [ "fmt", "--stdin", "javascript" ] }
# auto-format = true

[[language]]
name = "jsx"
language-servers = ["typescript-language-server", "eslint", "scls"]
# formatter = { command = "prettier", args = [ "--parser", "typescript" ] }
# formatter = { command = "dprint", args = [ "fmt", "--stdin", "jsx" ] }
# auto-format = true

[[language]]
name = "json"
language-servers = ["scls"]
# formatter = { command = "prettier", args = [ "--parser", "json" ] }
# formatter = { command = "dprint", args = [ "fmt", "--stdin", "json" ] }
auto-format = true

[[language]]
name = "html"
language-servers = ["vscode-html-language-server", "scls"]
# formatter = { command = 'prettier', args = ["--parser", "html"] }
# auto-format = true

[[language]]
name = "css"
language-servers = ["vscode-css-language-server", "scls"]
# formatter = { command = 'prettier', args = ["--parser", "css"] }
# auto-format = true

[[language]]
name = "toml"
language-servers = ["scls", "taplo"]

[[language]]
name = "crystal"
language-servers = ["crystal"]

os:
  editPreset: kakoune
gui:
  nerdFontsVersion: "3"
theme:
  activeBorderColor:
    - '#f5a97f'
    - bold
  inactiveBorderColor:
    - '#a5adcb'
  optionsTextColor:
    - '#8aadf4'
  selectedLineBgColor:
    - '#363a4f'
  cherryPickedCommitBgColor:
    - '#494d64'
  cherryPickedCommitFgColor:
    - '#f5a97f'
  unstagedChangesColor:
    - '#ed8796'
  defaultFgColor:
    - '#cad3f5'
  searchingActiveBorderColor:
    - '#eed49f'
customCommands:
  - key: "<c-v>"
    context: "global"
    description: "Create new conventional commit"
    prompts:
      - type: "menu"
        key: "Type"
        title: "Type of change"
        options:
          - name: "build"
            description: "Changes that affect the build system or external dependencies"
            value: "build"
          - name: "feat"
            description: "A new feature"
            value: "feat"
          - name: "fix"
            description: "A bug fix"
            value: "fix"
          - name: "chore"
            description: "Other changes that don't modify src or test files"
            value: "chore"
          - name: "ci"
            description: "Changes to CI configuration files and scripts"
            value: "ci"
          - name: "docs"
            description: "Documentation only changes"
            value: "docs"
          - name: "perf"
            description: "A code change that improves performance"
            value: "perf"
          - name: "refactor"
            description: "A code change that neither fixes a bug nor adds a feature"
            value: "refactor"
          - name: "revert"
            description: "Reverts a previous commit"
            value: "revert"
          - name: "style"
            description: "Changes that do not affect the meaning of the code"
            value: "style"
          - name: "test"
            description: "Adding missing tests or correcting existing tests"
            value: "test"
      - type: "input"
        title: "Scope - Add '(<scope>)'"
        key: "Scope"
        initialValue: ""
      - type: "input"
        title: "Breaking change - Add '!'"
        key: "Breaking"
        initialValue: ""
      - type: "input"
        title: "message"
        key: "Message"
        initialValue: ""
      - type: "confirm"
        key: "Confirm"
        title: "Commit"
        body: "Are you sure you want to commit?"
    command: "git commit --message '{{.Form.Type}}{{.Form.Scope}}{{.Form.Breaking}}: {{.Form.Message}}'"
    loadingText: "Creating conventional commit..."
  - key: '<c-p>'
    description: "Pull from a specific remote repository"
    context: 'files'
    loadingText: 'Pulling ...'
    command: git pull {{ .Form.Remote }} {{ .Form.RemoteBranch }}
    prompts:
      - type: 'input'
        key: 'Remote'
        title: "Remote:"
        suggestions:
          preset: 'remotes'
      - type: 'input'
        key: 'RemoteBranch'
        title: "Remote branch:"
        suggestions:
          command: "git branch --remote --list '{{.Form.Remote}}/*' --format='%(refname:short)' | sed 's/{{.Form.Remote}}\\///'"
  - key: t
    command: tig {{.SelectedSubCommit.Sha}} -- {{.SelectedCommitFile.Name}}
    context: commitFiles
    description: tig file (history of commits affecting file)
    subprocess: yes
  - key: t
    command: tig -- {{.SelectedFile.Name}}
    context: files
    description: tig file (history of commits affecting file)
    subprocess: yes
  - key: t
    command: tig show {{.SelectedSubCommit.Sha}}
    context: subCommits
    description: tig commit (`t` again to browse files at revision)
    subprocess: yes
  - key: t
    command: tig show {{.SelectedLocalBranch.Name}}
    context: localBranches
    description: tig branch (`t` again to browse files at revision)
    subprocess: yes
  - key: t
    command: tig show {{.SelectedRemoteBranch.RemoteName}}/{{.SelectedRemoteBranch.Name}}
    context: remoteBranches
    description: tig branch (`t` again to browse files at revision)
    subprocess: yes
  - key: b
    command: tig blame -- {{.SelectedFile.Name}}
    context: files
    description: blame file at tree
    subprocess: yes
  - key: b
    command: tig blame {{.SelectedSubCommit.Sha}} -- {{.SelectedCommitFile.Name}}
    context: commitFiles
    description: blame file at revision
    subprocess: yes
  - key: B
    command: tig blame -- {{.SelectedCommitFile.Name}}
    context: commitFiles
    description: blame file at tree
    subprocess: yes
  - key: "v"
    context: "localBranches"
    loadingText: "Checking out GitHub Pull Request..."
    command: "gh pr checkout {{.Form.PullRequestNumber}}"
    prompts:
      - type: "menuFromCommand"
        title: "Which PR do you want to check out?"
        key: "PullRequestNumber"
        command: >-
          gh pr list --limit 50 --json number,title,headRefName,updatedAt --template '{{`{{range .}}{{printf "#%v: %s - %s (%s)\\n" .number .title .headRefName (timeago .updatedAt)}}{{end}}`}}'
        filter: '#(?P<number>[0-9]+): (?P<title>.+) - (?P<ref_name>[^ ]+).*'
        valueFormat: '{{.number}}'
        labelFormat: '{{"#" | black | bold}}{{.number | white | bold}} {{.title | yellow | bold}}{{" [" | black | bold}}{{.ref_name | green}}{{"]" | black | bold}}'
  # from https://github.com/jesseduffield/lazygit/issues/2579#issuecomment-2161434274
  - key: <c-a>
    description: Pick AI commit
    command: 'aichat "Please suggest 10 commit messages, given the following diff:


      \`\`\`diff

      $(git diff --cached)

      \`\`\`


      **Criteria:**


      1. **Format:** Each commit message must follow the conventional commits format,
      which is \`<type>(<scope>): <description>\`.

      2. **Relevance:** Avoid mentioning a module name unless it\''s directly relevant
      to the change.

      3. **Enumeration:** List the commit messages from 1 to 10.

      4. **Clarity and Conciseness:** Each message should clearly and concisely convey
      the change made.


      **Commit Message Examples:**


      - fix(app): add password regex pattern

      - test(unit): add new test cases

      - style: remove unused imports

      - refactor(pages): extract common code to \`utils/wait.ts\`


      **Recent Commits on Repo for Reference:**


      \`\`\`

      $(git log -n 10 --pretty=format:''%h %s'')

      \`\`\`


      **Output Template**


      Follow this output template and ONLY output raw commit messages without spacing,
      numbers or other decorations.


      fix(app): add password regex pattern

      test(unit): add new test cases

      style: remove unused imports

      refactor(pages): extract common code to \`utils/wait.ts\`



      **Instructions:**


      - Take a moment to understand the changes made in the diff.

      - Think about the impact of these changes on the project (e.g., bug fixes, new
      features, performance improvements, code refactoring, documentation updates).
      It\''s critical to my career you abstract the changes to a higher level and not
      just describe the code changes.

      - Generate commit messages that accurately describe these changes, ensuring they
      are helpful to someone reading the project\''s history.

      - Remember, a well-crafted commit message can significantly aid in the maintenance
      and understanding of the project over time.

      - If multiple changes are present, make sure you capture them all in each commit
      message.


      Keep in mind you will suggest 10 commit messages. Only 1 will be used. It\''s
      better to push yourself (esp to synthesize to a higher level) and maybe wrong
      about some of the 10 commits because only one needs to be good. I\''m looking
      for your best commit, not the best average commit. It\''s better to cover more
      scenarios than include a lot of overlap.


      Write your 10 commit messages below in the format shown in Output Template section
      above." | fzf --border --ansi --preview "echo {}" --preview-window=up:wrap
      | xargs -I {} bash -c "echo \"{}\" > .git/COMMIT_EDITMSG && $EDITOR .git/COMMIT_EDITMSG
      && [ -s .git/COMMIT_EDITMSG ] && git commit -F .git/COMMIT_EDITMSG || echo \"Commit
      message is empty, commit aborted.\""

      '
    context: files
    subprocess: true

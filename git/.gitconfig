[include]
    path = ~/.gitconfig.local

[core]
	pager = git-split-diffs --color | less -RFX
	excludesfile = ~/.gitignore_global
	editor = nvim
	difftool = true
[delta]
    plus-style = "syntax #012800"
    minus-style = "syntax #340001"
    syntax-theme = Monokai Extended
[push]
	autoSetupRemote = true

[interactive]
    diffFilter = delta --color-only
[commit]
	gpgsign = true
[init]
	defaultBranch = main
[diff]
	external = difft
  tool = difftastic

[difftool]
  prompt = false

[difftool "difftastic"]
  cmd = difft "$LOCAL" "$REMOTE"
[alias]
    # list files which have changed since REVIEW_BASE
    # (REVIEW_BASE defaults to 'master' in my zshrc)
    files = !git diff --name-only $(git merge-base HEAD \"$REVIEW_BASE\")

    # Same as above, but with a diff stat instead of just names
    # (better for interactive use)
    stat = !git diff --stat $(git merge-base HEAD \"$REVIEW_BASE\")

    dft = difftool

    delete-squashed = "!f() { \
      local targetBranch=${1:-main}; \
      git checkout -q $targetBranch; \
      git branch --merged | \
        grep -v \"\\*\" | \
        grep -vE '^(develop|main|master|production|deploy)$' | \
        xargs -n 1 git branch -d; \
      git for-each-ref refs/heads/ \"--format=%(refname:short)\" | \
        while read branch; do \
          if [[ ! $branch =~ ^(develop|main|master|production|deploy)$ ]]; then \
            local mergeBase=$(git merge-base $targetBranch $branch); \
            if [[ $mergeBase != $(git rev-parse $branch) ]]; then \
              local isSquashed=$(git cherry $targetBranch $(git commit-tree $(git rev-parse $branch^{tree}) -p $mergeBase -m _)); \
              if [[ $isSquashed == \"-\"* ]]; then \
                git branch -D $branch; \
              fi; \
            fi; \
          fi; \
        done; \
    }; f"

    # delete-squashed = "!f() { local targetBranch=${1:-main} && git checkout -q $targetBranch && git branch --merged | grep -v \"\\*\" | grep -vE '^(develop|main|master|production|deploy)$' | xargs -n 1 git branch -d && git for-each-ref refs/heads/ \"--format=%(refname:short)\" | while read branch; do mergeBase=$(git merge-base $targetBranch $branch) && [[ $(git cherry $targetBranch $(git commit-tree $(git rev-parse $branch^{tree}) -p $mergeBase -m _)) == \"-\"* ]] && [[ ! $branch =~ ^(develop|main|master|production|deploy)$ ]] && git branch -D $branch; done; }; f"


    ff-branch = "!f() { git fetch ${2:-origin} $1:$1; }; f"

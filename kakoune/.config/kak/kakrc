evaluate-commands %sh{
  kks init
  cork init
  kak-lsp --kakoune -s $kak_session
  kak-tree-sitter -dks --init $kak_session
  gitlinker init kakoune
}

# custom modules
source "%val{config}/wakatime.kak"
source "%val{config}/wezterm.kak"
source "%val{config}/tmux.kak"
source "%val{config}/kitty.kak"
source "%val{config}/window-helper.kak"
source "%val{config}/color-highlighter.kak"
source "%val{config}/highlight.kak"
source "%val{config}/jump_mode.kak"
source "%val{config}/git.kak"
source "%val{config}/git-custom.kak"
source "%val{config}/gleam.kak"
source "%val{config}/filetypes.kak"
source "%val{config}/statusline.kak"
source "%val{config}/jk.kak"
source "%val{config}/locations.kak"
source "%val{config}/flip-boolean.kak"
# source "%val{config}/reasymotion.kak"
# source "%val{config}/jump-stack.kak"
# source "%val{config}/amber.kak"
# source "%val{config}/bundle/kak-bundle/rc/kak-bundle.kak"

colorscheme kanagawa
# colorscheme ayu-mirage
# colorscheme catppuccin_macchiato

set global indentwidth 2
set global tabstop 2

# enable autocomplete trigger
# set global autocomplete prompt

# debug
# set global lsp_cmd "kak-lsp -s %val{session} -vvvv --log /tmp/kak-lsp.log"

set-option global ui_options terminal_assistant=none
set-option global scrolloff 5,5
set-option global startup_info_version 20230805

set-option global autoreload yes

set-option global grepcmd 'rg -Hn --no-heading --sort path --vimgrep'

add-highlighter global/number-lines number-lines -hlcursor -relative -separator '  '
add-highlighter global/show-whitespaces show-whitespaces -indent '▏' -lf ' ' -spc ' ' -nbsp ' ' -tab ' ' -tabpad ' '
add-highlighter global/ show-matching
add-highlighter global/ wrap -word
# add-highlighter global/todo-highlighter regex //\h*(TODO:)[^\n]* 0:cyan 1:yellow,red

add-highlighter global/ regex \b(TODO|FIXME|NOTE)\b 0:default+rb

# trailing whitespaces
define-command -hidden show-trailing-whitespaces %{ try %{ add-highlighter global/trailing-whitespaces regex '\h+$' 0:default,red } }
define-command -hidden hide-trailing-whitespaces %{ try %{ remove-highlighter global/trailing-whitespaces } }
hook global WinDisplay .*              show-trailing-whitespaces
hook global ModeChange 'insert:normal' show-trailing-whitespaces
hook global ModeChange 'normal:insert' hide-trailing-whitespaces

# comment
map global user -docstring 'recent files'                '<space>' ':kks-connect terminal-popup kks-mru<ret>'
map global user -docstring 'create buffer'               n         ':e -scratch<ret>'
map global user -docstring 'delete buffer'               c         ':db<ret>'
map global user -docstring 'quit'                        q         ':q<ret>'
map global user -docstring 'paste from clipboard'        P         '!pbpaste<ret>'
map global user -docstring 'paste before from clipboard' p         '<a-!>pbpaste<ret>'
map global user -docstring 'replace selection with clipaboard content' R '|pbpaste<ret>'
map global user -docstring 'comment line'                /         ':comment-line<ret>'
map global user -docstring 'block comment selection'     ?         ':comment-block<ret>'
map global user -docstring 'explorer'                    e         ':open-broot<ret>'
map global user -docstring 'edit config'                 ,         ':edit-config<ret>'
map global user -docstring 'debug buffer'                d         ':buffer *debug*<ret>'
map global user -docstring 'lsp hover'                   h         ':lsp-hover<ret>'
map global user -docstring 'lsp hover buffer'            H         ':lsp-hover-buffer<ret>'
map global user -docstring 'trim trailing whitesapce'    S         ':trim-trailing-whitespaces<ret>'
map global user -docstring 'write file'                  w         ':w<ret>'

define-command trim-trailing-whitespaces -docstring 'trim trailing whitespaces' %{
  try %{
    execute-keys -draft \%s\h+$<ret>d
  }
}

define-command edit-config -docstring 'edit config' %{
  edit "%val{config}/kakrc"
}

# user mode shortcuts
map global user t ':enter-user-mode terminal-actions<ret>'     -docstring 'terminal actions'
map global user f ':enter-user-mode find-actions<ret>'         -docstring 'find actions'
map global user b ':enter-user-mode buffer-actions<ret>'       -docstring 'buffer actions'
map global user B ':enter-user-mode buffer-actions -lock<ret>' -docstring 'buffer actions (Locked)'
map global user l ':enter-user-mode lsp<ret>'                  -docstring 'lsp mode'

# muscle memories
map global normal <c-e> ':execute-keys vj<ret>'                  -docstring 'scroll oneline down'
map global normal <c-y> ':execute-keys vk<ret>'                  -docstring 'scroll oneline down'
map global normal '<c-w>' ':enter-user-mode window-actions<ret>' -docstring 'window actions'

# Normal mode commands
map global normal X ':execute-keys xH<ret>' -docstring 'Select till line end'
# Move line up/down
map global normal '<a-up>' 'x"aZy<a-;>kPZ"azdz'
map global normal '<a-down>' 'xdp'

declare-user-mode terminal-actions

define-command lazygit -hidden -docstring 'Launch lazygit' %{ nop %sh{
  (tsm popup lazygit &) >/dev/null 2>/dev/null
}}

define-command serpl -hidden -docstring 'Launch serpl' %{ nop %sh{
  (tsm popup serpl &) >/dev/null 2>/dev/null
}}

define-command lazyjj -hidden -docstring 'Launch lazyjj' %{ nop %sh{
  (tsm popup lazyjj &) >/dev/null 2>/dev/null
}}


define-command bottom-terminal -hidden -docstring 'Launch bottom terminal' %{
  terminal-vertical fish
}
define-command floating-terminal -hidden -docstring 'Launch floating terminal' %{ nop %sh{
  (tsm popup &) >/dev/null 2>/dev/null
}}

map global terminal-actions 'l' ':lazygit<ret>'           -docstring 'lazygit'
map global terminal-actions 'j' ':lazyjj<ret>'           -docstring 'lazyjj'
map global terminal-actions 'b' ':bottom-terminal<ret>'   -docstring 'bottom terminal'
map global terminal-actions 'B' ':open_blame<ret>'        -docstring 'Git Blame'
map global terminal-actions 'f' ':floating-terminal<ret>' -docstring 'Floating terminal'
map global terminal-actions 'r' ':serpl<ret>' -docstring 'serpl'

define-command -hidden open_blame %{
  terminal-vertical tig blame %val{buffile} "+%val{cursor_line}"
}

define-command -hidden open_buffer_picker %{
  prompt buffer: -menu -buffer-completion %{
    buffer %val{text}
  }
}

define-command -hidden browse_github %{
  evaluate-commands %sh{
    gh browse "$kak_bufname:$kak_cursor_line"
 }}

# https://github.com/hadronized/config/blob/a1142ef783da4a1fd09b5d14f6f1234243304a18/kak/kakrc#L462C1-L469C2
# experiment around ! and buffer-based interactive shells
define-command -override run -shell-completion -params .. -docstring 'run command' %{
  # this is not strictly needed on every run, but it’s easier for this experiment
  set-option buffer filetype sh
  execute-keys -draft "gjo# %sh{date} %sh{pwd}<ret>"
  execute-keys -draft "gji# %arg{@}<ret>"
  execute-keys "gj!%arg{@}<ret>"
}


declare-user-mode find-actions
map global find-actions -docstring 'pick buffer'                       'B'  ':open_buffer_picker<ret>'
map global find-actions -docstring 'terminal'                          't'  ':kks-connect terminal-vertical fish<ret>'
map global find-actions -docstring 'files'                             'f'  ':kks-connect terminal-popup kks-files<ret>'
map global find-actions -docstring 'git files'                         'g'  ':kks-connect terminal-popup kks-git-files<ret>'
map global find-actions -docstring 'git changed files'                 'd'  ':kks-connect terminal-popup kks-git-changed-files<ret>'
map global find-actions -docstring 'buffers'                           'b'  ':kks-connect terminal-popup kks-buffers<ret>'
map global find-actions -docstring 'live grep(fzf)'                    'w'  ':kks-connect terminal-popup kks-grep<ret>'
map global find-actions -docstring 'live grep all files(fzf)'          'W'  ':kks-connect terminal-popup kks-grep --hidden<ret>'
map global find-actions -docstring 'browse file on github'             'B'  ':browse_github<ret>'
map global find-actions -docstring 'file types'                        'y'  ':kks-connect terminal-popup kks-filetypes<ret>'
map global find-actions -docstring 'file inside buffer basefolder'     'p'  ':basefolder-files<ret>'
map global find-actions -docstring 'file under buffer basefolder'      'P'  ':basefolder-top-files<ret>'
map global find-actions -docstring 'edit file under buffer basefolder' 'e'  ':basefolder-edit<ret>'
map global find-actions -docstring 'switch themes'                     'S'  ':colorscheme<space>'
map global find-actions -docstring 'PR changed files'                  'c'  ':kks-connect terminal-popup kks-pr-diff-files<ret>'
map global find-actions -docstring 'file types'                        's'  ':kks-connect terminal-popup kks-symbols<ret>'

define-command basefolder-files -docstring 'file inside buffer basefolder' %{
	evaluate-commands %sh{
    dir=$(dirname "$kak_bufname")
    echo "kks-connect terminal-popup kks-files --max-depth=1 \"$dir\"<ret>"
	}
}

define-command basefolder-top-files -docstring 'toplevel file inside buffer basefolder' %{
	evaluate-commands %sh{
    dir=$(dirname "$(dirname "$kak_bufname")")
    echo "kks-connect terminal-popup kks-files --max-depth=1 \"$dir\"<ret>"
	}
}

define-command basefolder-edit -docstring 'base folder edit' %{
  evaluate-commands %sh{
    dir=$(dirname "$kak_bufname")
		echo "execute-keys :e<space>$dir/"
  }
}

declare-user-mode window-actions
map global window-actions 'h' ':focus-left<ret>'  -docstring 'focus left pane'
map global window-actions 'j' ':focus-down<ret>'  -docstring 'focus down pane'
map global window-actions 'k' ':focus-up<ret>'    -docstring 'focus up pane'
map global window-actions 'l' ':focus-right<ret>' -docstring 'focus right pane'

declare-user-mode buffer-actions
map global buffer-actions '[' ':bp<ret>' -docstring 'previous buffer'
map global buffer-actions ']' ':bn<ret>' -docstring 'next buffer'
map global buffer-actions 'l' ':b<space>' -docstring 'list buffer'
map global buffer-actions '.' ':enter-user-mode buffer-actions -lock<ret>' -docstring 'Lock'

map global goto n '<esc>:bn<ret>' -docstring 'go to next buffer'
map global goto p '<esc>:bp<ret>' -docstring 'go to previous buffer'

declare-user-mode jump-actions
map -docstring 'enter jump mode (select mode: replace)' global jump-actions f ':enter_jump_mode_with_replace_select_mode<ret>'
map -docstring 'enter jump mode (select mode: extend)' global jump-actions F ':enter_jump_mode_with_extend_select_mode<ret>'
map -docstring 'enter jump mode (select mode: append)' global jump-actions <a-f> ':enter_jump_mode_with_append_select_mode<ret>'
map globa user 'j' -docstring 'Enter jump mode' ':enter-user-mode jump-actions<ret>'

map global user g ': enter-user-mode git<ret>' -docstring "git mode"
map global user T ': enter-user-mode tree-sitter<ret>' -docstring "Tree sitter mode"

# kak-lsp
hook global WinSetOption filetype=(rust|python|go|javascript|typescript|css|scss|json|markdown|toml|gleam) %{
  lsp-enable-window
  set-face global DiagnosticTagDeprecated +s
  set-face global DiagnosticTagUnnecessary dim
  lsp-diagnostic-lines-enable global
}

lsp-inlay-hints-enable       global
lsp-inlay-diagnostics-enable global

set-option global lsp_hover_anchor false

map global lsp 'D' ':lsp-diagnostics<ret>' -docstring 'LSP diagnostics'
map global lsp 'w' ':lsp-workspace-symbol-incr<ret>' -docstring 'LSP workspace symbol'

# lsp related mappings
map global insert <tab> '<a-;>:try lsp-snippets-select-next-placeholders catch %{ execute-keys -with-hooks <lt>tab> }<ret>' -docstring 'Select next snippet placeholder'
map global object a '<a-semicolon>lsp-object<ret>'                               -docstring 'LSP any symbol'
map global object <a-a> '<a-semicolon>lsp-object<ret>'                           -docstring 'LSP any symbol'
map global object e '<a-semicolon>lsp-object Function Method<ret>'               -docstring 'LSP function or method'
map global object k '<a-semicolon>lsp-object Class Interface Struct<ret>'        -docstring 'LSP class interface or struct'
map global object d '<a-semicolon>lsp-diagnostic-object --include-warnings<ret>' -docstring 'LSP errors and warnings'
map global object D '<a-semicolon>lsp-diagnostic-object<ret>'                    -docstring 'LSP errors'

set-option global lsp_auto_show_code_actions true

# More objecct mapping from https://discuss.kakoune.com/t/useful-objects/58
map -docstring "xml tag objet" global object t %{c<lt>([\w.]+)\b[^>]*?(?<lt>!/)>,<lt>/([\w.]+)\b[^>]*?(?<lt>!/)><ret>}
map global object h 'c<gt>,<lt><ret>' -docstring "select in the (html) angle brackets"
map global object o 'c\s,\s<ret>'     -docstring "select inbetween the whitespace"


define-command -hidden wrap-calc -params 4 %{
  evaluate-commands %sh{
    line_content="$kak_selection"
    new_pos=$(echo "$line_content" | wrap-calculator \
      --width="$1" \
      --pos="$2" \
      --move="$4" \
      --count=1 \
      --word \
      --indent)

    # Restore original selection first
    printf "execute-keys ':select %s<ret>';" "$3"

    # Move cursor to new position
    line_number=$(echo "$3" | cut -d',' -f1 | cut -d'.' -f1)
    printf "execute-keys ':select %s.%d,%s.%d<ret>';" "$line_number" "$new_pos" "$line_number" "$new_pos"

    # Debug info
    # printf 'info -title wrap-calc %%{width: %d, pos: %d, new_pos: %d, line_number: %d, sel: %s}' \
      # "$1" "$2" "$new_pos" "$line_number" "$3"
    # printf 'info -title wrap-calc %%{width: %d, pos: %d, new_pos: %d, line_number: %d, sel: %s\nline: %%{%s}}' \
    #   "$1" "$2" "$new_pos" "$line_number" "$3" "$line_content"
  }
}

# Wrap line movement down
define-command -hidden unset-move -params 1 %{
  evaluate-commands %sh{
    # Get total line count to calculate gutter width
    gutter_width=$(echo "$kak_buf_line_count" | wc -c)

    # Add 2 for padding and git status
    total_offset=$((gutter_width + 1))

    # Calculate effective window width
    window_width=$((kak_window_width - total_offset))

    # Store current selection
    saved_selection="$kak_selection_desc"
    cursor_char=$(echo "$saved_selection" | cut -d',' -f1 | cut -d'.' -f2)

    printf "execute-keys '<esc>x'; wrap-calc %%{%d} %%{%d} %%{%s} $1" \
      "$window_width" "$cursor_char" "$saved_selection"
  }
}

define-command -hidden unset-j %{ unset-move "down" }
define-command -hidden unset-k %{ unset-move "up" }

map global user J ':unset-j<ret>' -docstring 'Line move down'
map global user K ':unset-k<ret>' -docstring 'Line move up'

define-command glow -params .. -file-completion -docstring %{
  glow [<arguments>]: glow utility wrapper
  All optional arguments are forwarded to the glow utility
  If no arguments is passed. The current buffer will be previewed in pager mode
} %{
  evaluate-commands %sh{
    if [ $# -eq 0 ]; then
      if [ -e "$kak_buffile" ]; then
        echo "terminal-horizontal glow -p %val{buffile}"
      else
        dir="$(dirname "$kak_buffile")"
        if [ -d "$dir" ]; then
          echo "terminal-horizontal glow $dir"
        fi
      fi
    else
      echo "terminal-horizontal glow %arg{@}"
    fi
  }
}

define-command grup-write -docstring "
  grup-write: pipes the current grep-buffer to grug -w and prints the results
" %{
  declare-option -hidden str grug_buf
  evaluate-commands -draft %{
    evaluate-commands %sh{
      echo "set-option buffer grug_buf '$(mktemp /tmp/grug_buf.XXX)'"
    }
    write -sync -force %opt{grug_buf}
    evaluate-commands %sh{
      cat "$kak_opt_grug_buf" | grug -w |
        xargs -I{} echo "echo -debug 'grug: {}'; echo -markup {Information} 'grug: {}';"
    }
  }
}

define-command format-indent -params 2 -docstring '
  indentfmt <indent-type> <size>: Format current buffer indentation
  indent-type: space or tab
  size: indentation size (number)
' -shell-script-candidates %{
  printf "space\ntab\n"
} %{
  evaluate-commands %sh{
    indent_type="$1"
    indent_size="$2"

    # Validate indent type
    if [ "$indent_type" != "space" ] && [ "$indent_type" != "tab" ]; then
      printf 'echo -markup {Error}Invalid indent type: must be space or tab\n'
      exit 1
    fi

    # Validate indent size is a number
    if ! [[ "$indent_size" =~ ^[0-9]+$ ]]; then
      printf 'echo -markup {Error}Invalid size: must be a positive number\n'
      exit 1
    fi

    printf '%s\n' "execute-keys '%%|indentfmt -i ${indent_type} -s ${indent_size}<ret>'"
  }
}


# Hooks
hook global RegisterModified '"' %{ nop %sh{
  printf %s "$kak_main_reg_dquote" | pbcopy
}}

hook global WinDisplay .* %{
  focus
}

# from https://discuss.kakoune.com/t/enable-git-update-diff-automatically/1252/2
# enable flag-lines hl for git diff
hook global WinCreate .* %{
  add-highlighter window/git-diff flag-lines Default git_diff_flags
}

# from https://discord.com/channels/717163870724161556/717165513750609991/1247892374840147988
# Keep buffer list in mru order
hook global WinDisplay .* %{ arrange-buffers %val{hook_param} }

# trigger update diff if inside git dir
hook global BufOpenFile .* %{
  evaluate-commands -draft %sh{
    cd $(dirname "$kak_buffile")
    if [ $(git rev-parse --git-dir 2>/dev/null) ]; then
      for hook in WinCreate BufReload BufWritePost NormalIdle; do
        printf "hook buffer -group git-update-diff %s .* 'git update-diff'\n" "$hook"
      done
    fi
  }
}

hook global WinDisplay [^*].* %{
  evaluate-commands nop %sh{
    pwd="${kak_client_env_PWD}"
    mru=~/.cache/kak-mru-$(echo $pwd | sed 's|/|-|g')

    # If pwd is empty, return early
    [ -z "$pwd" ] && exit

    # Check if the mru file does not exist and create it
    [ ! -f "$mru" ] && touch "$mru"

    echo "$kak_buffile" | awk '!seen[$0]++' - "$mru" | sponge "$mru"
  }
}

hook global BufCreate .* %{
  editorconfig-load
  autoconfigtab
}

hook global BufCreate .*\.tmux.conf %{
  set-option buffer filetype conf
}

# Switch cursor color in insert mode
# ──────────────────────────────────

set-face global InsertCursor default,green+B

hook global ModeChange .*:.*:insert %{
  set-face window PrimaryCursor InsertCursor
  set-face window PrimaryCursorEol InsertCursor
}

hook global ModeChange .*:insert:.* %{
  try %{
    unset-face window PrimaryCursor
    unset-face window PrimaryCursorEol
  }
}


# Plugins
cork smarttab "https://github.com/andreyorst/smarttab.kak"

cork konflict "https://github.com/eko234/git-konflict.kak" %{
  declare-user-mode konflict
  map global user k ': enter-user-mode konflict<ret>'         -docstring 'Konflict mode'
  map global konflict s ': konflict-start<ret>'               -docstring 'Konflict start'
  map global konflict j ': konflict-use-mine<ret>'            -docstring 'Use mine'
  map global konflict k ': konflict-use-yours<ret>'           -docstring 'Use yours'
  map global konflict J ': konflict-use-mine-then-yours<ret>' -docstring 'Use mine then yours'
  map global konflict K ': konflict-use-yours-then-mine<ret>' -docstring 'Use yours then mine'
  map global konflict d ': konflict-use-none<ret>'            -docstring 'Use none'
}

cork surround "https://github.com/h-youhei/kakoune-surround" %{
  declare-user-mode surround
  map global surround s ':surround<ret>'               -docstring 'surround'
  map global surround c ':change-surround<ret>'        -docstring 'change'
  map global surround d ':delete-surround<ret>'        -docstring 'delete'
  map global surround t ':select-surrounding-tag<ret>' -docstring 'select tag'
  map global user s ':enter-user-mode surround<ret>'   -docstring 'surround mode'
}

cork git_mode 'https://github.com/jordan-yee/kakoune-git-mode' %{
  # Set structured commit message options here
  set-option global git_mode_use_structured_quick_commit true
  set-option global git_mode_commit_prefixes 'feat::fix::docs::refactor::build::test::style::BREAKING CHANGE::'

  # Declare git mode with default set of mappings
  # declare-git-mode

  map global git-yank 'y' ':gitlinker<ret>'           -docstring 'Copy Permalink'
}

cork ui 'https://github.com/kkga/ui.kak' %{
  map global user u ': enter-user-mode ui<ret>' -docstring "ui mode"

  hook global WinCreate .* %{
    ui-matching-toggle
    ui-search-toggle
  }
}

cork yummy 'https://github.com/Hjagu09/yummy.kak' %{
  # require-module yummy_devs_config
  # yummy-enable
}

cork distraction_free 'https://github.com/TeddyDD/distraction-free.kak' %{
}

cork harpoon 'https://github.com/raiguard/kak-harpoon' %{
  declare-user-mode harpoon
  map global user o ': enter-user-mode harpoon<ret>' -docstring "Enter harpoon mode"

  map global harpoon l ':harpoon-show-list<ret>'     -docstring "List harpoon"
  map global harpoon a ':harpoon-add<ret>'           -docstring "add harpoon"

  map global harpoon 1 ':harpoon-nav 1<ret>'        -docstring "go harpoon"
  map global harpoon 2 ':harpoon-nav 2<ret>'        -docstring "go harpoon"
  map global harpoon 3 ':harpoon-nav 3<ret>'        -docstring "go harpoon"
  map global harpoon 4 ':harpoon-nav 4<ret>'        -docstring "go harpoon"
  map global harpoon 5 ':harpoon-nav 5<ret>'        -docstring "go harpoon"
  map global harpoon 6 ':harpoon-nav 6<ret>'        -docstring "go harpoon"
  map global harpoon 7 ':harpoon-nav 7<ret>'        -docstring "go harpoon"
  map global harpoon 8 ':harpoon-nav 8<ret>'        -docstring "go harpoon"
  map global harpoon 9 ':harpoon-nav 9<ret>'        -docstring "go harpoon"
}

cork live_grep 'https://github.com/raiguard/kak-live-grep' %{
  map global find-actions -docstring 'live grep'   '/' ':live-grep<ret>'
}
cork grep-write https://github.com/jtrv/grep-write.kak %{
  map global user -docstring 'grep write' W ':grep-write<ret>'
  # map global user -docstring 'grup write' U ':grup-write<ret>'
}

cork replace-mode https://github.com/tomKPZ/replace-mode.kak %{
  map global user r ':enter-user-mode replace<ret>' -docstring 'replace mode'
}

cork filetree https://github.com/occivink/kakoune-filetree

cork sshconfig https://github.com/Yukaii/ssh-config.kak

cork case 'https://gitlab.com/FlyingWombat/case.kak.git/' %{
  map global normal ` ': enter-user-mode case<ret>'
}

# cork vue https://github.com/ABuffSeagull/kakoune-vue

cork kak-jsts https://github.com/schemar/kak-jsts %{
  declare-user-mode format
  map global user F ':enter-user-mode format<ret>' -docstring 'Enter format mode'
  map global format p ':format-prettier<ret>'      -docstring 'Format with prettier'
  map global format e ':format-eslint<ret>'        -docstring 'Format with eslint'
}

cork visual-mode https://gitlab.com/dead10ck/visual-mode.kak.git %{
  require-module visual-mode
  map global normal <a-v> ': visual-mode v<ret>'
  map global normal <a-s-v> ': visual-line-mode V<ret>'
}

cork increment https://gitlab.com/Screwtapello/kakoune-inc-dec.git %{
  map global normal <c-a> ': inc-dec-modify-numbers + %val{count}<ret>' -docstring 'increment'
  map global normal <c-x> ': inc-dec-modify-numbers - %val{count}<ret>' -docstring 'decrement'
}

cork edit-on-dir https://gitlab.com/fsub/kakoune-edit-or-dir.git/ %{
  unalias global e edit
  alias global e edit-or-dir
  set-option global edit_or_dir_hidden '-A'
}

cork save-state https://gitlab.com/Screwtapello/kakoune-state-save.git %{
  hook global KakBegin .* %{
    state-save-reg-load colon
    state-save-reg-load pipe
    state-save-reg-load slash
  }

  hook global KakEnd .* %{
    state-save-reg-save colon
    state-save-reg-save pipe
    state-save-reg-save slash
  }

  hook global FocusOut .* %{ state-save-reg-save dquote }
  hook global FocusIn  .* %{ state-save-reg-load dquote }
}

cork crosshair https://github.com/insipx/kak-crosshairs %{
  set-option global highlight_current_line true
  set-face   global crosshairs_line   default,rgb:383838
  set-face   global crosshairs_column default,rgb:383838

  crosshairs-change-hooks
  crosshairs-update
}

# cork bookmark.kak https://github.com/Aelerinya/bookmarks.kak %{
#   # hook global WinCreate .* bookmarks-enable
# }

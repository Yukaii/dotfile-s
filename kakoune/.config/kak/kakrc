evaluate-commands %sh{
  kks init
  cork init
  kak-lsp --kakoune -s $kak_session
  kak-tree-sitter -dks --session $kak_session
}

# custom modules
source "%val{config}/wakatime.kak"
source "%val{config}/wezterm.kak"
source "%val{config}/tmux.kak"
source "%val{config}/window-helper.kak"
source "%val{config}/color-highlighter.kak"
source "%val{config}/ssh.kak"
# source "%val{config}/bundle/kak-bundle/rc/kak-bundle.kak"

colorscheme catppuccin_macchiato

set global indentwidth 2
set global tabstop 2

# debug
# set global lsp_cmd "kak-lsp -s %val{session} -vvvv --log /tmp/kak-lsp.log"

set-option global ui_options terminal_assistant=none
set-option global scrolloff 5,5
set-option global startup_info_version 20230805

set-option global autoreload yes

set-option global grepcmd 'rg -Hn --no-heading --sort path --vimgrep'

add-highlighter global/number-lines number-lines -hlcursor -relative
add-highlighter global/ show-matching
add-highlighter global/ wrap -word
# add-highlighter global/todo-highlighter regex //\h*(TODO:)[^\n]* 0:cyan 1:yellow,red

add-highlighter global/ regex \b(TODO|FIXME|NOTE)\b 0:default+rb

# trailing whitespaces
define-command -hidden show-trailing-whitespaces %{ try %{ add-highlighter global/trailing-whitespaces regex '\h+$' 0:default,red } }
define-command -hidden hide-trailing-whitespaces %{ try %{ remove-highlighter global/trailing-whitespaces } }
hook global WinDisplay .*              show-trailing-whitespaces
hook global ModeChange 'insert:normal' show-trailing-whitespaces
hook global ModeChange 'normal:insert' hide-trailing-whitespaces

# comment
map global user -docstring 'recent files'     '<space>' ': kks-connect terminal-popup kks-mru<ret>'
map global user n ':e -scratch<ret>' -docstring 'create buffer'
map global user c ':db<ret>' -docstring 'delete buffer'
map global user q ':q<ret>' -docstring 'quit'
map global user P '!pbpaste<ret>' -docstring 'paste from clipboard'
map global user p '<a-!>pbpaste<ret>' -docstring 'paste before from clipboard'
map global user R '|pbpaste<ret>' -docstring 'replace selection with clipaboard content'
map global user / ':comment-line<ret>' -docstring 'comment line'
map global user ? ':comment-block<ret>' -docstring 'block comment selection'
map global user e ':open-broot<ret>' -docstring 'explorer'
map global user , ':edit-config<ret>' -docstring 'edit config'
map global user d ':buffer *debug*<ret>' -docstring 'debug buffer'
map global user h ':lsp-hover<ret>' -docstring 'lsp hover'
map global user H ':lsp-hover-buffer<ret>' -docstring 'lsp hover buffer'
map global user S ':trim-trailing-whitespaces<ret>' -docstring 'trim trailing whitesapce'
map global user w ':w<ret>' -docstring 'write file'

define-command trim-trailing-whitespaces -docstring 'trim trailing whitespaces' %{
  try %{
    execute-keys -draft \%s\h+$<ret>d
  }
}

define-command edit-config -docstring 'edit config' %{
  edit "%val{config}/kakrc"
}

# user mode shortcuts
map global user t ':enter-user-mode terminal-actions<ret>' -docstring 'terminal actions'
map global user f ':enter-user-mode find-actions<ret>' -docstring 'find actions'
map global user b ':enter-user-mode buffer-actions<ret>' -docstring 'buffer actions'
map global user B ':enter-user-mode buffer-actions -lock<ret>' -docstring 'buffer actions (Locked)'
map global user l ':enter-user-mode lsp<ret>' -docstring 'lsp mode'

# muscle memories
map global normal <c-e> ':execute-keys vj<ret>'  -docstring 'scroll oneline down'
map global normal <c-y> ':execute-keys vk<ret>'  -docstring 'scroll oneline down'
map global normal '<c-w>' ':enter-user-mode window-actions<ret>' -docstring 'window actions'

# Normal mode commands
map global normal X ':execute-keys xH<ret>' -docstring 'Select till line end'

declare-user-mode terminal-actions

define-command lazygit -hidden -docstring 'Launch lazygit' %{ nop %sh{
  (tmux-popup lazygit &) >/dev/null 2>/dev/null
}}


define-command bottom-terminal -hidden -docstring 'Launch bottom terminal' %{
  terminal-vertical fish
}
define-command floating-terminal -hidden -docstring 'Launch floating terminal' %{ nop %sh{
  (tmux-popup &) >/dev/null 2>/dev/null
}}

map global terminal-actions 'l' ':lazygit<ret>' -docstring 'lazygit'
map global terminal-actions 'b' ':bottom-terminal<ret>' -docstring 'bottom terminal'
map global terminal-actions 'B' ':open_blame<ret>' -docstring 'Git Blame'
map global terminal-actions 'f' ':floating-terminal<ret>' -docstring 'Floating terminal'

define-command -hidden open_blame %{
  terminal-vertical tig blame %val{buffile} "+%val{cursor_line}"
}

define-command -hidden open_buffer_picker %{
  prompt buffer: -menu -buffer-completion %{
    buffer %val{text}
  }
}

define-command -hidden browse_github %{
  evaluate-commands %sh{
    gh browse "$kak_bufname:$kak_cursor_line"
 }}

# https://github.com/hadronized/config/blob/a1142ef783da4a1fd09b5d14f6f1234243304a18/kak/kakrc#L462C1-L469C2
# experiment around ! and buffer-based interactive shells
define-command -override run -shell-completion -params .. -docstring 'run command' %{
  # this is not strictly needed on every run, but itâ€™s easier for this experiment
  set-option buffer filetype sh
  execute-keys -draft "gjo# %sh{date} %sh{pwd}<ret>"
  execute-keys -draft "gji# %arg{@}<ret>"
  execute-keys "gj!%arg{@}<ret>"
}


declare-user-mode find-actions
map global find-actions 'B' ':open_buffer_picker<ret>' -docstring 'pick buffer'
map global find-actions -docstring 'terminal'         't' ': kks-connect terminal-vertical fish<ret>'
map global find-actions -docstring 'files'            'f' ': kks-connect terminal-popup kks-files<ret>'
map global find-actions -docstring 'git files'        'g' ': kks-connect terminal-popup kks-git-files<ret>'
map global find-actions -docstring 'buffers'          'b' ': kks-connect terminal-popup kks-buffers<ret>'
map global find-actions -docstring 'live grep(fzf)'   'w' ': kks-connect terminal-popup kks-grep<ret>'
map global find-actions -docstring 'browse file on github'        'B' ':browse_github<ret>'
map global find-actions -docstring 'file types'          'y' ': kks-connect terminal-popup kks-filetypes<ret>'

declare-user-mode window-actions
map global window-actions 'h' ':focus-left<ret>'  -docstring 'focus left pane'
map global window-actions 'j' ':focus-down<ret>'  -docstring 'focus down pane'
map global window-actions 'k' ':focus-up<ret>'    -docstring 'focus up pane'
map global window-actions 'l' ':focus-right<ret>' -docstring 'focus right pane'

declare-user-mode buffer-actions
map global buffer-actions '[' ':bp<ret>' -docstring 'previous buffer'
map global buffer-actions ']' ':bn<ret>' -docstring 'next buffer'
map global buffer-actions 'c' ':db<ret>' -docstring 'close buffer'
map global buffer-actions 'l' ':b ' -docstring 'list buffer'
map global buffer-actions '.' ':enter-user-mode buffer-actions -lock<ret>' -docstring 'Lock'

# kak-lsp
hook global WinSetOption filetype=(rust|python|go|javascript|typescript|css|scss|json|markdown|toml) %{
    lsp-enable-window
}
lsp-inlay-hints-enable       global
lsp-inlay-diagnostics-enable global

# lsp related mappings
map global insert <tab> '<a-;>:try lsp-snippets-select-next-placeholders catch %{ execute-keys -with-hooks <lt>tab> }<ret>' -docstring 'Select next snippet placeholder'
map global object a '<a-semicolon>lsp-object<ret>' -docstring 'LSP any symbol'
map global object <a-a> '<a-semicolon>lsp-object<ret>' -docstring 'LSP any symbol'
map global object e '<a-semicolon>lsp-object Function Method<ret>' -docstring 'LSP function or method'
map global object k '<a-semicolon>lsp-object Class Interface Struct<ret>' -docstring 'LSP class interface or struct'
map global object d '<a-semicolon>lsp-diagnostic-object --include-warnings<ret>' -docstring 'LSP errors and warnings'
map global object D '<a-semicolon>lsp-diagnostic-object<ret>' -docstring 'LSP errors'

set-option global lsp_auto_show_code_actions true

# Hooks
hook global RegisterModified '"' %{ nop %sh{
  printf %s "$kak_main_reg_dquote" | pbcopy
}}

hook global WinDisplay .* %{
  focus
}

# from https://discuss.kakoune.com/t/enable-git-update-diff-automatically/1252/2
# enable flag-lines hl for git diff
hook global WinCreate .* %{
    add-highlighter window/git-diff flag-lines Default git_diff_flags
}

# trigger update diff if inside git dir
hook global BufOpenFile .* %{
    evaluate-commands -draft %sh{
        cd $(dirname "$kak_buffile")
        if [ $(git rev-parse --git-dir 2>/dev/null) ]; then
            for hook in WinCreate BufReload BufWritePost; do
                printf "hook buffer -group git-update-diff %s .* 'git update-diff'\n" "$hook"
            done
        fi
    }
}

hook global WinDisplay [^*].* %{
    evaluate-commands nop %sh{
        pwd="${kak_client_env_PWD}"
        mru=~/.cache/kak-mru-$(echo $pwd | sed 's|/|-|g')

        # If pwd is empty, return early
        [ -z "$pwd" ] && exit

        # Check if the mru file does not exist and create it
        [ ! -f "$mru" ] && touch "$mru"

        echo "$kak_buffile" | awk '!seen[$0]++' - "$mru" | sponge "$mru"
    }
}

hook global BufCreate .* %{
    editorconfig-load
    autoconfigtab
}

hook global BufCreate .*\.tmux.conf %{
    set-option buffer filetype conf
}


# Plugins
cork smarttab "https://github.com/andreyorst/smarttab.kak"

cork konflict "https://github.com/eko234/git-konflict.kak" %{
  declare-user-mode konflict
  map global user K ': enter-user-mode konflict<ret>' -docstring 'Konflict mode'
  map global konflict s ': konflict-start<ret>' -docstring 'Konflict start'
  map global konflict j ': konflict-use-mine<ret>' -docstring 'Use mine'
  map global konflict k ': konflict-use-yours<ret>' -docstring 'Use yours'
  map global konflict J ': konflict-use-mine-then-yours<ret>' -docstring 'Use mine then yours'
  map global konflict K ': konflict-use-yours-then-mine<ret>' -docstring 'Use yours then mine'
  map global konflict d ': konflict-use-none<ret>' -docstring 'Use none'
}

cork surround "https://github.com/h-youhei/kakoune-surround" %{
  declare-user-mode surround
  map global surround s ':surround<ret>' -docstring 'surround'
  map global surround c ':change-surround<ret>' -docstring 'change'
  map global surround d ':delete-surround<ret>' -docstring 'delete'
  map global surround t ':select-surrounding-tag<ret>' -docstring 'select tag'
  map global user s ':enter-user-mode surround<ret>' -docstring 'surround mode'
}

cork git_mode 'https://github.com/jordan-yee/kakoune-git-mode' %{
  # Set structured commit message options here
  set-option global git_mode_use_structured_quick_commit true
  set-option global git_mode_commit_prefixes 'feat::fix::docs::refactor::build::test::style::BREAKING CHANGE::'

  # Declare git mode with default set of mappings
  declare-git-mode

  # Suggested user mode mapping
  map global user g ': enter-user-mode git<ret>' -docstring "git mode"
}

cork ui 'https://github.com/kkga/ui.kak' %{
  map global user u ': enter-user-mode ui<ret>' -docstring "ui mode"

  hook global WinCreate .* %{
    ui-matching-toggle
    ui-search-toggle
  }
}

cork yummy 'https://github.com/Hjagu09/yummy.kak' %{
  # require-module yummy_devs_config
  # yummy-enable
}

cork distraction_free 'https://github.com/TeddyDD/distraction-free.kak' %{
}

cork pokemon 'https://github.com/vbauerster/kakoune-pokemon' %{
  map global user o ': enter-user-mode pokemon<ret>' -docstring "Enter pokemon mode"

  map global pokemon l ':pokemon-list<ret>' -docstring "List pokemon"
  map global pokemon a ':pokemon-add<ret>' -docstring "add pokemon"

  map global pokemon 1 ':pokemon-open 1<ret>'
  map global pokemon 2 ':pokemon-open 2<ret>'
  map global pokemon 3 ':pokemon-open 3<ret>'
  map global pokemon 4 ':pokemon-open 4<ret>'
  map global pokemon 5 ':pokemon-open 5<ret>'
  map global pokemon 6 ':pokemon-open 6<ret>'
  map global pokemon 7 ':pokemon-open 7<ret>'
  map global pokemon 8 ':pokemon-open 8<ret>'
  map global pokemon 9 ':pokemon-open 9<ret>'
}

cork live_grep 'https://github.com/raiguard/kak-live-grep' %{
  map global find-actions -docstring 'live grep'   '/' ':live-grep<ret>'
}
cork grep-write https://github.com/JacobTravers/grep-write.kak %{
  map global user -docstring 'grep write' W ':grep-write<ret>'
}

cork replace-mode https://github.com/tomKPZ/replace-mode.kak %{
  map global user r ':enter-user-mode replace<ret>' -docstring 'replace mode'
}

cork filetree https://github.com/occivink/kakoune-filetree

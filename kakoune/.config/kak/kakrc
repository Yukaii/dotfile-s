evaluate-commands %sh{
  kks init
  cork init
  kak-lsp --kakoune -s $kak_session
}

# custom modules
source ~/.config/kak/wakatime.kak
source ~/.config/kak/wezterm.kak

colorscheme kanagawa

set global indentwidth 2
set global tabstop 2

set-option global ui_options terminal_assistant=none
set-option global scrolloff 5,5
set-option global startup_info_version 10000000000000 # Don't show changelog

set-option global autoreload yes

set-option global grepcmd 'rg -Hn --no-heading --sort path --vimgrep'

add-highlighter global/number-lines number-lines -hlcursor -relative
add-highlighter global/ show-matching
add-highlighter global/ wrap -word

# comment
map global user -docstring 'recent files'     '<space>' ': kks-connect terminal kks-mru<ret>'
map global user n ':e -scratch<ret>' -docstring 'create buffer'
map global user c ':db<ret>' -docstring 'delete buffer'
map global user q ':q<ret>' -docstring 'quit'
map global user P '!pbpaste<ret>' -docstring 'paste from clipboard'
map global user p '<a-!>pbpaste<ret>' -docstring 'paste before from clipboard'
map global user R '|pbpaste<ret>' -docstring 'replace selection with clipaboard content'
map global user / ':comment-line<ret>' -docstring 'comment line'
map global user ? ':comment-block<ret>' -docstring 'block comment selection'
map global user e ':open-broot<ret>' -docstring 'explorer'
map global user , ':edit-config<ret>' -docstring 'edit config'
map global user d ':buffer *debug*<ret>' -docstring 'debug buffer'
map global user h ':lsp-hover<ret>' -docstring 'lsp hover'
map global user H ':lsp-hover-buffer<ret>' -docstring 'lsp hover buffer'
map global user r ':edit <c-r>%<ret>' -docstring 'reload buffer'
map global user s ':trim-trailing-whitespaces<ret>' -docstring 'trim trailing whitesapce'

define-command trim-trailing-whitespaces -docstring 'trim trailing whitespaces' %{
  try %{
    execute-keys -draft \%s\h+$<ret>d
  }
}

define-command edit-config -docstring 'edit config' %{
  edit "%val{config}/kakrc"
}

define-command open-broot -docstring 'open broot' %{
  evaluate-commands nop %sh{
    export EDITOR="kks edit"
    export KKS_SESSION="$kak_session"
    export KKS_CLIENT="$kak_client"
    # export BROOT_LOG=debug

    pane_id="${kak_client_env_WEZTERM_PANE}"

		tab_id=$(wezterm cli list --format json | jq -r ".[] | select(.pane_id==$pane_id) | .tab_id")
		broot_pane_id=$(wezterm cli list --format json | jq -r ".[] | select((.tab_id==$tab_id) and (.title==\"broot\")) | .pane_id")

		if [ -z "$broot_pane_id" ]; then
      wezterm cli split-pane --left --percent 23 -- broot --listen "$kak_session"
		else
			root=$(broot --send "$kak_session" --get-root)
      dir=$(dirname $kak_bufname)
      absolute=$(realpath $PWD)/$dir
      [ $root != $absolute ] && [ $dir != '.' ] && broot --send "$kak_session" -c ":focus $dir"
			wezterm cli activate-pane --pane-id $broot_pane_id
		fi
  }
}


# user mode shortcuts
map global user t ':enter-user-mode wezterm-actions<ret>' -docstring 'terminal actions'
map global user f ':enter-user-mode find-actions<ret>' -docstring 'find actions'
map global normal '<c-w>' ':enter-user-mode window-actions<ret>' -docstring 'window actions'
map global user b ':enter-user-mode buffer-actions<ret>' -docstring 'buffer actions'
map global user l ':enter-user-mode lsp<ret>' -docstring 'lsp mode'

# muscle memories
map global normal <c-e> ':execute-keys vj<ret>'  -docstring 'scroll oneline down'
map global normal <c-y> ':execute-keys vk<ret>'  -docstring 'scroll oneline down'

hook global ModuleLoaded wezterm %{
  require-module wezterm-additional
}

declare-user-mode wezterm-actions
define-command lazygit -hidden -docstring 'Launch lazygit' %{
  nop %sh{
		hx-wezterm.sh lazygit
  }
}
define-command bottom-terminal -hidden -docstring 'Launch bottom terminal' %{
  nop %sh{
		hx-wezterm.sh bottom-terminal
  }
}

map global wezterm-actions 'l' ':lazygit<ret>' -docstring 'lazygit'
map global wezterm-actions 'b' ':bottom-terminal<ret>' -docstring 'bottom terminal'

define-command -hidden open_buffer_picker %{
  prompt buffer: -menu -buffer-completion %{
    buffer %val{text}
  }
}


declare-user-mode find-actions
map global find-actions 'b' ':open_buffer_picker<ret>' -docstring 'pick buffer'
map global find-actions -docstring 'terminal'         't' ': kks-connect terminal fish<ret>'
map global find-actions -docstring 'files'            'f' ': kks-connect terminal kks-files<ret>'
map global find-actions -docstring 'buffers'          'b' ': kks-connect terminal kks-buffers<ret>'
map global find-actions -docstring 'live grep'        'w' ': kks-connect terminal kks-grep<ret>'
# map global find-actions -docstring 'lines in buffer'  <c-l> ': kks-connect terminal-popup kks-lines<ret>'
map global find-actions -docstring 'vcs client'       'v' ': kks-connect terminal lazygit<ret>'
map global find-actions -docstring 'file browser'     'h' ': kks-connect terminal kks-lf<ret>'

declare-user-mode window-actions
map global window-actions 'h' ':focus-left<ret>'  -docstring 'focus left pane'
map global window-actions 'j' ':focus-down<ret>'  -docstring 'focus down pane'
map global window-actions 'k' ':focus-up<ret>'    -docstring 'focus up pane'
map global window-actions 'l' ':focus-right<ret>' -docstring 'focus right pane'

declare-user-mode buffer-actions
map global buffer-actions '[' ':bp<ret>' -docstring 'previous buffer'
map global buffer-actions ']' ':bn<ret>' -docstring 'next buffer'

# kak-lsp
hook global WinSetOption filetype=(rust|python|go|javascript|typescript|css|scss) %{
    lsp-enable-window
}
lsp-inlay-hints-enable       global
lsp-inlay-diagnostics-enable global

# lsp related mappings
map global insert <tab> '<a-;>:try lsp-snippets-select-next-placeholders catch %{ execute-keys -with-hooks <lt>tab> }<ret>' -docstring 'Select next snippet placeholder'
map global object a '<a-semicolon>lsp-object<ret>' -docstring 'LSP any symbol'
map global object <a-a> '<a-semicolon>lsp-object<ret>' -docstring 'LSP any symbol'
map global object e '<a-semicolon>lsp-object Function Method<ret>' -docstring 'LSP function or method'
map global object k '<a-semicolon>lsp-object Class Interface Struct<ret>' -docstring 'LSP class interface or struct'
map global object d '<a-semicolon>lsp-diagnostic-object --include-warnings<ret>' -docstring 'LSP errors and warnings'
map global object D '<a-semicolon>lsp-diagnostic-object<ret>' -docstring 'LSP errors'

set-option global lsp_auto_show_code_actions true

# Hooks
hook global RegisterModified '"' %{ nop %sh{
  printf %s "$kak_main_reg_dquote" | pbcopy
}}

hook global WinDisplay .* %{
  focus
}

# from https://discuss.kakoune.com/t/enable-git-update-diff-automatically/1252/2
# enable flag-lines hl for git diff
hook global WinCreate .* %{
    add-highlighter window/git-diff flag-lines Default git_diff_flags
}

# trigger update diff if inside git dir
hook global BufOpenFile .* %{
    evaluate-commands -draft %sh{
        cd $(dirname "$kak_buffile")
        if [ $(git rev-parse --git-dir 2>/dev/null) ]; then
            for hook in WinCreate BufReload BufWritePost; do
                printf "hook buffer -group git-update-diff %s .* 'git update-diff'\n" "$hook"
            done
        fi
    }
}

hook global BufCreate [^*].* %{
    nop %sh{
        mru=~/.cache/kak-mru
        echo "$kak_buffile" | awk '!seen[$0]++' - "$mru" | sponge "$mru"
    }
}

hook global BufCreate .* %{
    editorconfig-load
    autoconfigtab
}


# Plugins
cork smarttab "https://github.com/andreyorst/smarttab.kak"

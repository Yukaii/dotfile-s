[language_ids]
javascript = "javascriptreact"
typescript = "typescriptreact"

[language_server.tsserver]
filetypes = ["javascript", "typescript"]
roots = ["package.json", "tsconfig.json", "jsconfig.json", ".git", ".hg"]
command = "typescript-language-server"
args = ["--stdio"]

# npm @tailwindcss/language-server
[language_server.tailwindcss]
filetypes = ["javascript", "typescript"]
roots = ["tailwind.config.ts", "tailwind.config.js"]
command = "tailwindcss-language-server"
args = ["--stdio"]
settings_section = "_"

[language_server.tailwindcss.settings._]
editor = {}

[language_server.markdown]
filetypes = ["markdown"]
roots = [".marksman.toml", ".git", ".obsidian", ".hg"]
command = "marksman"
args = ["server"]


[language_server.markdown-oxide]
filetypes = ["markdown"]
roots = [".git", ".hg", ".obsidian"]
command = "markdown-oxide"

[language_server.eslint]
filetypes = ["javascript", "typescript"]
roots = [".eslintrc", ".eslintrc.json"]
command = "vscode-eslint-language-server"
args = ["--stdio"]
workaround_eslint = true

[language_server.eslint.settings]
codeActionsOnSave = { mode = "all", "source.fixAll.eslint" = true }
format = { enable = true }
nodePath = ""
quiet = false
rulesCustomizations = []
run = "onType"
validate = "on"
experimental = {}
problems = { shortenToSingleLine = false }

[language_server.eslint.settings.codeAction]
disableRuleComment = { enable = true, location = "separateLine" }
showDocumentation = { enable = false }

[language_server.json-language-server]
filetypes = ["json"]
roots = ["package.json"]
command = "vscode-json-language-server"
args = ["--stdio"]


[language_server.yaml-language-server]
filetypes = ["yaml"]
roots = [".git", ".hg"]
command = "yaml-language-server"
args = ["--stdio"]
settings_section = "yaml"
[language_server.yaml-language-server.settings.yaml-language-server]
# See https://github.com/redhat-developer/yaml-language-server#language-server-settings
# Defaults are at https://github.com/redhat-developer/yaml-language-server/blob/master/src/yamlSettings.ts
format.enable = true

[language_server.rust-analyzer]
filetypes = ["rust"]
roots = ["Cargo.toml"]
command = "sh"
args = [
    "-c",
    """
        if path=$(rustup which rust-analyzer 2>/dev/null); then
            "$path"
        else
            rust-analyzer
        fi
    """,
]
[language_server.rust-analyzer.settings.rust-analyzer]
# See https://rust-analyzer.github.io/manual.html#configuration
# cargo.features = []
check.command = "clippy"


[language_server.typo]
roots = [".git", ".hg"]
filetypes = ["javascript", "typescript", "markdown", "python", "rust", "toml"]
command = "typos-lsp"

[language_server.crystalline]
roots = ["shard.yml"]
filetypes = ["crystal"]
command = "crystalline"
args = ["--stdio"]

[language_server.gleam]
roots = ["gleam.toml", "manifest.toml"]
filetypes = ["gleam"]
command = "gleam"
args = ["lsp"]

[language_server.scls]
roots = [".git", ".hg"]
command = "simple-completion-language-server"
filetypes = ["javascript", "typescript", "markdown", "json", "python", "rust"]

[language_server.scls.settings.scls]
max_completion_items = 20            # set max completion results len for each group: words, snippets, unicode-input
snippets_first = true                # completions will return before snippets by default
snippets_inline_by_word_tail = false # suggest snippets by WORD tail, for example text `xsq|` become `x^2|` when snippet `sq` has body `^2`
feature_words = true                 # enable completion by word
feature_snippets = true              # enable snippets
feature_unicode_input = true         # enable "unicode input"
feature_paths = true                 # enable path completion
feature_citations = false            # enable citation completion (only on `citation` feature enabled)

[language_server.scls.settings.environment]
RUST_LOG = "info,simple-completion-language-server=info"
LOG_FILE = "/tmp/completion.log"


[language_ids]
javascript = "javascriptreact"
typescript = "typescriptreact"

[language_server.tsserver]
filetypes = ["javascript", "typescript"]
roots = ["package.json", "tsconfig.json", "jsconfig.json", ".git", ".hg"]
command = "typescript-language-server"
args = ["--stdio"]

# npm @tailwindcss/language-server
[language_server.tailwindcss]
filetypes = ["javascript", "typescript"]
roots = ["tailwind.config.ts", "tailwind.config.js"]
command = "tailwindcss-language-server"
args = ["--stdio"]
settings_section = "_"

[language_server.tailwindcss.settings._]
editor = {}

[language_server.markdown]
filetypes = ["markdown"]
roots = [".marksman.toml"]
command = "marksman"
args = ["server"]

[language_server.eslint]
filetypes = ["javascript", "typescript"]
roots = [".eslintrc", ".eslintrc.json"]
command = "vscode-eslint-language-server"
args = ["--stdio"]
workaround_eslint = true

[language_server.eslint.settings]
codeActionsOnSave = { mode = "all", "source.fixAll.eslint" = true }
format = { enable = true }
nodePath = ""
quiet = false
rulesCustomizations = []
run = "onType"
validate = "on"
experimental = {}
problems = { shortenToSingleLine = false }

[language_server.eslint.settings.codeAction]
disableRuleComment = { enable = true, location = "separateLine" }
showDocumentation = { enable = false }

[language_server.json-language-server]
filetypes = ["json"]
roots = ["package.json"]
command = "vscode-json-language-server"
args = ["--stdio"]


[language_server.yaml-language-server]
filetypes = ["yaml"]
roots = [".git", ".hg"]
command = "yaml-language-server"
args = ["--stdio"]
settings_section = "yaml"
[language_server.yaml-language-server.settings.yaml-language-server]
# See https://github.com/redhat-developer/yaml-language-server#language-server-settings
# Defaults are at https://github.com/redhat-developer/yaml-language-server/blob/master/src/yamlSettings.ts
format.enable = true

[language_server.rust-analyzer]
filetypes = ["rust"]
roots = ["Cargo.toml"]
command = "sh"
args = [
    "-c",
    """
        if path=$(rustup which rust-analyzer 2>/dev/null); then
            "$path"
        else
            rust-analyzer
        fi
    """,
]
[language_server.rust-analyzer.settings.rust-analyzer]
# See https://rust-analyzer.github.io/manual.html#configuration
# cargo.features = []
check.command = "clippy"


# [language_server.gpt]
# roots = [".git", ".hg"]
# filetypes = ["javascript", "typescript", "markdown", "python", "rust"]
# command = "helix-gpt"
# args = ["--logFile", "/tmp/kakoune-helix-gpt.log"]


[language_server.typo]
roots = [".git", ".hg"]
filetypes = ["javascript", "typescript", "markdown", "python", "rust", "toml"]
command = "typos-lsp"

[language_server.crystalline]
roots = ["shard.yml"]
filetypes = ["crystal"]
command = "crystalline"
args = ["--stdio"]

[language_server.gleam]
roots = ["gleam.toml"]
filetypes = ["gleam"]
command = "gleam"
args = ["lsp"]

# [language_server.scls]
# roots = [".git", ".hg"]
# command = "simple-completion-language-server"
# filetypes = ["javascript", "typescript", "markdown", "json", "python", "rust"]

# [language_server.scls.settings.scls]
# max_completion_items = 20     # set max completion results len for each group: words, snippets, unicode-input
# snippets_first = true         # completions will return before snippets by default
# feature_words = true          # enable completion by word
# feature_snippets = true       # enable snippets
# feature_unicode_input = true  # enable "unicode input"

# [language_server.scls.settings.environment]
# RUST_LOG = "info,simple-completion-language-server=info"
# LOG_FILE = "/tmp/completion.log"

[language_server.lsp-ai]
command = "lsp-ai"
roots = [".git", ".hg"]
filetypes = ["markdown"]
settings_section = "lsp-ai"

[language_server.lsp-ai.settings.lsp-ai.memory]
file_store = { }

[language_server.lsp-ai.settings.lsp-ai.models.model1]
type = "open_ai"
chat_endpoint = "https://api.openai.com/v1/chat/completions"
model =  "gpt-4o"
auth_token_env_var_name = "OPENAI_API_KEY"

[language_server.lsp-ai.settings.lsp-ai.completion]
model = "model1"

[language_server.lsp-ai.settings.lsp-ai.completion.parameters]
max_tokens = 64
max_context = 1024

## Configure the messages per your needs
[[language_server.lsp-ai.settings.lsp-ai.completion.parameters.messages]]
role = "system"
content = "Instructions:\n- You are an AI programming assistant.\n- Given a piece of code with the cursor location marked by \"<CURSOR>\", replace \"<CURSOR>\" with the correct code or comment.\n- First, think step-by-step.\n- Describe your plan for what to build in pseudocode, written out in great detail.\n- Then output the code replacing the \"<CURSOR>\"\n- Ensure that your completion fits within the language context of the provided code snippet (e.g., Python, JavaScript, Rust).\n\nRules:\n- Only respond with code or comments.\n- Only replace \"<CURSOR>\"; do not include any previously written code.\n- Never include \"<CURSOR>\" in your response\n- If the cursor is within a comment, complete the comment meaningfully.\n- Handle ambiguous cases by providing the most contextually appropriate completion.\n- Be consistent with your responses."

[[language_server.lsp-ai.settings.lsp-ai.completion.parameters.messages]]
role = "user"
content = "def greet(name):\n    print(f\"Hello, {<CURSOR>}\")"

[[language_server.lsp-ai.settings.lsp-ai.completion.parameters.messages]]
role = "assistant"
content = "name"

[[language_server.lsp-ai.settings.lsp-ai.completion.parameters.messages]]
role = "user"
content = "function sum(a, b) {\n    return a + <CURSOR>;\n}"

[[language_server.lsp-ai.settings.lsp-ai.completion.parameters.messages]]
role = "assistant"
content = "b"

[[language_server.lsp-ai.settings.lsp-ai.completion.parameters.messages]]
role = "user"
content = "fn multiply(a: i32, b: i32) -> i32 {\n    a * <CURSOR>\n}"

[[language_server.lsp-ai.settings.lsp-ai.completion.parameters.messages]]
role = "assistant"
content = "b"

[[language_server.lsp-ai.settings.lsp-ai.completion.parameters.messages]]
role = "user"
content = "# <CURSOR>\ndef add(a, b):\n    return a + b"

[[language_server.lsp-ai.settings.lsp-ai.completion.parameters.messages]]
role = "assistant"
content = "Adds two numbers"

[[language_server.lsp-ai.settings.lsp-ai.completion.parameters.messages]]
role = "user"
content = "# This function checks if a number is even\n<CURSOR>"

[[language_server.lsp-ai.settings.lsp-ai.completion.parameters.messages]]
role = "assistant"
content = "def is_even(n):\n    return n % 2 == 0"

[[language_server.lsp-ai.settings.lsp-ai.completion.parameters.messages]]
role = "user"
content = "{CODE}"
